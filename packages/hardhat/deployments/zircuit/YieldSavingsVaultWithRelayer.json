{
  "address": "0xb5dbFa780ddeA99978319F56343cBeCc4a26199A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executedCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BatchExecutionCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "saver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "HelperAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "saver",
          "type": "address"
        }
      ],
      "name": "PlanCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "saver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyAmount",
          "type": "uint256"
        }
      ],
      "name": "PlanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "PlanDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PlanExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "RelayerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newYieldRate",
          "type": "uint256"
        }
      ],
      "name": "YieldRateUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLAN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YIELD_INDEX_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "authorizeHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedHelpers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        }
      ],
      "name": "cancelPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "createPlan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "createPlanWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyTransferInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        }
      ],
      "name": "executePlan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "planIds",
          "type": "bytes32[]"
        }
      ],
      "name": "executePlans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "executedCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxResults",
          "type": "uint256"
        }
      ],
      "name": "getExecutablePlans",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "planIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        }
      ],
      "name": "getPlan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "saver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dailyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct YieldSavingsVaultWithRelayer.SavingsPlan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "saver",
          "type": "address"
        }
      ],
      "name": "getSaverPlans",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenYieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getUserTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "savingsPlans",
      "outputs": [
        {
          "internalType": "address",
          "name": "saver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dailyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTransferDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDailyInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newExecutionWindow",
          "type": "uint256"
        }
      ],
      "name": "setExecutionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yearlyYieldRate",
          "type": "uint256"
        }
      ],
      "name": "setTokenYieldRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenYieldConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yearlyYieldRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalTokenDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "planId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "updatePlanData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPlanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPlans",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userYieldIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb322b8cbb84c172eac90c3b9b182ae85814dd9592175a0fa73cd69a71dfe946",
  "receipt": {
    "to": null,
    "from": "0x15E6c77f52a5043747643979a73dA45CfE094cfa",
    "contractAddress": "0xb5dbFa780ddeA99978319F56343cBeCc4a26199A",
    "transactionIndex": 0,
    "gasUsed": "2972931",
    "logsBloom": "0x
    "blockHash": "0x15b97d5f7b5a3dfdc037bf7c23c6ae1be455ac42cc873b2e15112c6fb7e7de84",
    "transactionHash": "0xeb322b8cbb84c172eac90c3b9b182ae85814dd9592175a0fa73cd69a71dfe946",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21981168,
        "transactionHash": "0xeb322b8cbb84c172eac90c3b9b182ae85814dd9592175a0fa73cd69a71dfe946",
        "address": "0xb5dbFa780ddeA99978319F56343cBeCc4a26199A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000015e6c77f52a5043747643979a73da45cfe094cfa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x15b97d5f7b5a3dfdc037bf7c23c6ae1be455ac42cc873b2e15112c6fb7e7de84"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21981168,
        "transactionHash": "0xeb322b8cbb84c172eac90c3b9b182ae85814dd9592175a0fa73cd69a71dfe946",
        "address": "0xb5dbFa780ddeA99978319F56343cBeCc4a26199A",
        "topics": [
          "0x4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c43",
          "0x00000000000000000000000015e6c77f52a5043747643979a73da45cfe094cfa"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x15b97d5f7b5a3dfdc037bf7c23c6ae1be455ac42cc873b2e15112c6fb7e7de84"
      }
    ],
    "blockNumber": 21981168,
    "cumulativeGasUsed": "2972931",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff51b70cab644154c053d93fea8f8b2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executedCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BatchExecutionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"HelperAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"}],\"name\":\"PlanCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyAmount\",\"type\":\"uint256\"}],\"name\":\"PlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"PlanDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlanExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"RelayerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newYieldRate\",\"type\":\"uint256\"}],\"name\":\"YieldRateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_INDEX_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"authorizeHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedHelpers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"}],\"name\":\"cancelPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"createPlan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"createPlanWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyTransferInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"}],\"name\":\"executePlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"planIds\",\"type\":\"bytes32[]\"}],\"name\":\"executePlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxResults\",\"type\":\"uint256\"}],\"name\":\"getExecutablePlans\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"planIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"}],\"name\":\"getPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct YieldSavingsVaultWithRelayer.SavingsPlan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"}],\"name\":\"getSaverPlans\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenYieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"savingsPlans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"saver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDailyInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExecutionWindow\",\"type\":\"uint256\"}],\"name\":\"setExecutionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yearlyYieldRate\",\"type\":\"uint256\"}],\"name\":\"setTokenYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenYieldConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yearlyYieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updatePlanData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPlanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPlans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userYieldIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A vault that automates daily savings transfers using relayers and generates yield on deposits\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"authorizeHelper(address,bool)\":{\"details\":\"Authorize someone to help manage your plans\",\"params\":{\"helper\":\"Address of the helper\",\"isAuthorized\":\"Whether to authorize or remove authorization\"}},\"cancelPlan(bytes32)\":{\"details\":\"Cancel a savings plan\",\"params\":{\"planId\":\"ID of the plan to cancel\"}},\"claimYield(address)\":{\"details\":\"Claim accumulated yield\",\"params\":{\"tokenAddress\":\"Token to claim yield for\"}},\"constructor\":{\"details\":\"Sets up the contract with security parameters\"},\"createPlan(address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"Create a savings plan directly (no signature needed)\",\"params\":{\"dailyAmount\":\"How much to save each day\",\"endDate\":\"When to stop saving (0 = never)\",\"extraData\":\"Any additional data for this plan\",\"recipientAddress\":\"Who receives the savings\",\"startDate\":\"When to start saving\",\"tokenAddress\":\"The token you want to save\"},\"returns\":{\"planId\":\"The ID of your new savings plan\"}},\"createPlanWithSignature(address,address,uint256,uint256,uint256,bytes,bytes)\":{\"details\":\"Create a savings plan with your signature\",\"params\":{\"dailyAmount\":\"How much to save each day\",\"endDate\":\"When to stop saving (0 = never)\",\"extraData\":\"Any additional data for this plan\",\"recipientAddress\":\"Who receives the savings\",\"signature\":\"Your signature confirming this plan\",\"startDate\":\"When to start saving\",\"tokenAddress\":\"The token you want to save\"},\"returns\":{\"planId\":\"The ID of the created plan\"}},\"deposit(address,uint256)\":{\"details\":\"Deposit tokens into the vault to earn yield\",\"params\":{\"amount\":\"How much to deposit\",\"tokenAddress\":\"The token to deposit\"}},\"executePlan(bytes32)\":{\"details\":\"Execute a specific plan (relayer or owner only)\",\"params\":{\"planId\":\"Plan ID to execute\"},\"returns\":{\"success\":\"Whether execution was successful\"}},\"executePlans(bytes32[])\":{\"details\":\"Execute multiple plans at once (relayer only)\",\"params\":{\"planIds\":\"Array of plan IDs to execute\"},\"returns\":{\"executedCount\":\"Number of successfully executed plans\"}},\"getExecutablePlans(address,uint256)\":{\"details\":\"Get executable plans for a token (relayer only)\",\"params\":{\"maxResults\":\"Maximum number of results to return\",\"tokenAddress\":\"Token address to filter by\"},\"returns\":{\"planIds\":\"Array of executable plan IDs\"}},\"getPendingYield(address,address)\":{\"details\":\"Calculate pending yield for a user\",\"params\":{\"tokenAddress\":\"Token address\",\"user\":\"User address\"},\"returns\":{\"_0\":\"pendingYield Amount of pending yield\"}},\"getPlan(bytes32)\":{\"details\":\"Get details for a specific plan\",\"params\":{\"planId\":\"ID of the plan\"},\"returns\":{\"_0\":\"plan Plan details\"}},\"getSaverPlans(address)\":{\"details\":\"Get all plans for a specific saver\",\"params\":{\"saver\":\"Saver's address\"},\"returns\":{\"_0\":\"planIds Array of plan IDs\"}},\"getTokenYieldRate(address)\":{\"details\":\"Get current yield rate for a token\",\"params\":{\"tokenAddress\":\"Token address\"},\"returns\":{\"_0\":\"rate Annual yield rate in basis points\"}},\"getUserTotalBalance(address,address)\":{\"details\":\"Get user's token balance including pending yield\",\"params\":{\"tokenAddress\":\"Token address\",\"user\":\"User address\"},\"returns\":{\"_0\":\"balance User's total balance including pending yield\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExecutionParameters(uint256,uint256)\":{\"details\":\"Update execution parameters (owner only)\",\"params\":{\"newDailyInterval\":\"New interval between executions\",\"newExecutionWindow\":\"New execution window after interval\"}},\"setRelayer(address,bool)\":{\"details\":\"Add or remove a relayer\",\"params\":{\"isAuthorized\":\"Whether to authorize or remove\",\"relayer\":\"Address of the relayer\"}},\"setTokenYieldRate(address,uint256)\":{\"details\":\"Set yield rate for a token (owner only)\",\"params\":{\"tokenAddress\":\"The token to configure\",\"yearlyYieldRate\":\"Annual yield rate in basis points (e.g., 500 = 5%)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePlanData(bytes32,bytes)\":{\"details\":\"Update extra data for a savings plan\",\"params\":{\"data\":\"New data to store\",\"planId\":\"ID of the plan to update\"}},\"withdraw(address,uint256)\":{\"details\":\"Withdraw tokens from the vault\",\"params\":{\"amount\":\"How much to withdraw\",\"tokenAddress\":\"The token to withdraw\"}}},\"title\":\"YieldSavingsVaultWithRelayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DailySavingsManager.sol\":\"YieldSavingsVaultWithRelayer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/DailySavingsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title YieldSavingsVaultWithRelayer\\n * @dev A vault that automates daily savings transfers using relayers and generates yield on deposits\\n */\\ncontract YieldSavingsVaultWithRelayer is Ownable, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n    using MessageHashUtils for bytes32;\\n\\n    struct SavingsPlan {\\n        address saver;            // Person saving money\\n        address token;            // The token being saved\\n        address recipient;        // Who receives the money\\n        uint256 dailyAmount;      // How much to transfer each day\\n        uint256 startDate;        // When to start saving\\n        uint256 endDate;          // When to stop (0 = never)\\n        uint256 lastTransferDate; // When was the last transfer done\\n        uint256 planNumber;       // Unique identifier within user's plans\\n        bool isActive;            // Is this plan currently active\\n    }\\n    \\n    struct TokenYieldConfig {\\n        uint256 yearlyYieldRate;   // Yearly yield rate in basis points (1% = 100)\\n        uint256 lastUpdateTime;    // Last time the yield was calculated\\n        uint256 yieldIndex;        // Cumulative yield index (starts at 1e18)\\n    }\\n\\n    // User balance tracking\\n    mapping(address => mapping(address => uint256)) public userTokenBalances;    // user => token => balance\\n    mapping(address => mapping(address => uint256)) public userYieldIndexes;     // user => token => yield index when last updated\\n    \\n    // Token configuration\\n    mapping(address => TokenYieldConfig) public tokenYieldConfigs;\\n    mapping(address => uint256) public totalTokenDeposits;                       // Total tokens deposited\\n    \\n    // Plan ID to plan details\\n    mapping(bytes32 => SavingsPlan) public savingsPlans;\\n    \\n    // Plan ID to associated extra data\\n    mapping(bytes32 => bytes) private _planData;\\n    \\n    // User address to array of their plan IDs\\n    mapping(address => bytes32[]) public userPlans;\\n    \\n    // Helpers who can update plan data on behalf of users\\n    mapping(address => mapping(address => bool)) public authorizedHelpers;\\n    \\n    // Authorized relayers that can execute plans\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    // User plan counter for unique identification\\n    mapping(address => uint256) public userPlanCount;\\n    \\n    // Domain separator for secure signatures\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    \\n    // TypeHash for the savings plan\\n    bytes32 public constant PLAN_TYPEHASH = keccak256(\\n        \\\"SavingsPlan(address saver,address token,address recipient,uint256 dailyAmount,uint256 startDate,uint256 endDate,uint256 planNumber)\\\"\\n    );\\n    \\n    // TypeHash for helper authorization\\n    bytes32 public constant HELPER_TYPEHASH = keccak256(\\n        \\\"Helper(address saver,address helper,bool isAuthorized,uint256 planNumber,uint256 deadline)\\\"\\n    );\\n    \\n    // Execution parameters\\n    uint256 public dailyTransferInterval = 1 days;\\n    uint256 public executionWindow = 3 hours;\\n    \\n    // Constants\\n    uint256 public constant YIELD_INDEX_PRECISION = 1e18;\\n    uint256 public constant BASIS_POINTS = 10000;  // 100% in basis points\\n    \\n    // Events\\n    event PlanCreated(bytes32 indexed planId, address indexed saver, address recipient, uint256 dailyAmount);\\n    event PlanExecuted(bytes32 indexed planId, uint256 transferAmount, uint256 timestamp);\\n    event PlanCancelled(bytes32 indexed planId, address indexed saver);\\n    event HelperAuthorized(address indexed saver, address indexed helper, bool isAuthorized);\\n    event PlanDataUpdated(bytes32 indexed planId, bytes data);\\n    event TokenDeposited(address indexed user, address indexed token, uint256 amount);\\n    event TokenWithdrawn(address indexed user, address indexed token, uint256 amount);\\n    event YieldClaimed(address indexed user, address indexed token, uint256 amount);\\n    event YieldRateUpdated(address indexed token, uint256 newYieldRate);\\n    event RelayerUpdated(address indexed relayer, bool isAuthorized);\\n    event BatchExecutionCompleted(uint256 executedCount, uint256 timestamp);\\n\\n    /**\\n     * @dev Sets up the contract with security parameters\\n     */\\n    constructor() Ownable(msg.sender) {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(\\\"YieldSavingsVaultWithRelayer\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        \\n        // Add the deployer as an initial relayer\\n        authorizedRelayers[msg.sender] = true;\\n        emit RelayerUpdated(msg.sender, true);\\n    }\\n    \\n    /**\\n     * @dev Modifier to check if caller is an authorized relayer\\n     */\\n    modifier onlyRelayer() {\\n        require(authorizedRelayers[msg.sender], \\\"Not an authorized relayer\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Add or remove a relayer\\n     * @param relayer Address of the relayer\\n     * @param isAuthorized Whether to authorize or remove\\n     */\\n    function setRelayer(address relayer, bool isAuthorized) external onlyOwner {\\n        require(relayer != address(0), \\\"Invalid relayer address\\\");\\n        authorizedRelayers[relayer] = isAuthorized;\\n        emit RelayerUpdated(relayer, isAuthorized);\\n    }\\n    \\n    /**\\n     * @dev Deposit tokens into the vault to earn yield\\n     * @param tokenAddress The token to deposit\\n     * @param amount How much to deposit\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external nonReentrant {\\n        require(tokenAddress != address(0), \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        require(tokenYieldConfigs[tokenAddress].yearlyYieldRate > 0, \\\"Token not supported for yield\\\");\\n        \\n        // Update yield index first\\n        _updateYieldIndex(tokenAddress);\\n        \\n        // Get current index\\n        uint256 currentIndex = tokenYieldConfigs[tokenAddress].yieldIndex;\\n        \\n        // If this is user's first deposit for this token, set their index\\n        if (userTokenBalances[msg.sender][tokenAddress] == 0) {\\n            userYieldIndexes[msg.sender][tokenAddress] = currentIndex;\\n        } else {\\n            // If they have a balance, claim pending yield first\\n            _claimYield(msg.sender, tokenAddress);\\n        }\\n        \\n        // Transfer tokens to vault\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        \\n        // Update balances\\n        userTokenBalances[msg.sender][tokenAddress] += amount;\\n        totalTokenDeposits[tokenAddress] += amount;\\n        \\n        emit TokenDeposited(msg.sender, tokenAddress, amount);\\n    }\\n    \\n    /**\\n     * @dev Withdraw tokens from the vault\\n     * @param tokenAddress The token to withdraw\\n     * @param amount How much to withdraw\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        require(userTokenBalances[msg.sender][tokenAddress] >= amount, \\\"Insufficient balance\\\");\\n        \\n        // Claim any pending yield first\\n        _updateYieldIndex(tokenAddress);\\n        _claimYield(msg.sender, tokenAddress);\\n        \\n        // Update balances\\n        userTokenBalances[msg.sender][tokenAddress] -= amount;\\n        totalTokenDeposits[tokenAddress] -= amount;\\n        \\n        // Transfer tokens back to user\\n        IERC20(tokenAddress).transfer(msg.sender, amount);\\n        \\n        emit TokenWithdrawn(msg.sender, tokenAddress, amount);\\n    }\\n    \\n    /**\\n     * @dev Claim accumulated yield\\n     * @param tokenAddress Token to claim yield for\\n     */\\n    function claimYield(address tokenAddress) external nonReentrant {\\n        _updateYieldIndex(tokenAddress);\\n        _claimYield(msg.sender, tokenAddress);\\n    }\\n    \\n    /**\\n     * @dev Create a savings plan with your signature\\n     * @param tokenAddress The token you want to save\\n     * @param recipientAddress Who receives the savings\\n     * @param dailyAmount How much to save each day\\n     * @param startDate When to start saving\\n     * @param endDate When to stop saving (0 = never)\\n     * @param signature Your signature confirming this plan\\n     * @param extraData Any additional data for this plan\\n     * @return planId The ID of the created plan\\n     */\\n    function createPlanWithSignature(\\n        address tokenAddress,\\n        address recipientAddress,\\n        uint256 dailyAmount,\\n        uint256 startDate,\\n        uint256 endDate,\\n        bytes calldata signature,\\n        bytes calldata extraData\\n    ) external returns (bytes32 planId) {\\n        require(tokenAddress != address(0), \\\"Invalid token\\\");\\n        require(recipientAddress != address(0), \\\"Invalid recipient\\\");\\n        require(dailyAmount > 0, \\\"Amount must be positive\\\");\\n        \\n        // Get this user's next plan number\\n        uint256 planNumber = userPlanCount[msg.sender]++;\\n        \\n        // Create a unique ID for this plan\\n        planId = _hashPlan(\\n            msg.sender,\\n            tokenAddress,\\n            recipientAddress,\\n            dailyAmount,\\n            startDate,\\n            endDate,\\n            planNumber\\n        );\\n        \\n        // Verify the signature\\n        address signer = _verifyPlanSignature(planId, signature);\\n        require(signer == msg.sender, \\\"Invalid signature\\\");\\n        \\n        // Create the savings plan\\n        SavingsPlan memory plan = SavingsPlan({\\n            saver: msg.sender,\\n            token: tokenAddress,\\n            recipient: recipientAddress,\\n            dailyAmount: dailyAmount,\\n            startDate: startDate > block.timestamp ? startDate : block.timestamp,\\n            endDate: endDate,\\n            lastTransferDate: block.timestamp,\\n            planNumber: planNumber,\\n            isActive: true\\n        });\\n        \\n        savingsPlans[planId] = plan;\\n        userPlans[msg.sender].push(planId);\\n        \\n        // Store any extra data\\n        if (extraData.length > 0) {\\n            _planData[planId] = extraData;\\n            emit PlanDataUpdated(planId, extraData);\\n        }\\n        \\n        // Ensure token has a yield configuration (even if it's 0%)\\n        if (tokenYieldConfigs[tokenAddress].yieldIndex == 0) {\\n            tokenYieldConfigs[tokenAddress] = TokenYieldConfig({\\n                yearlyYieldRate: 0,\\n                lastUpdateTime: block.timestamp,\\n                yieldIndex: YIELD_INDEX_PRECISION\\n            });\\n        }\\n        \\n        emit PlanCreated(planId, msg.sender, recipientAddress, dailyAmount);\\n    }\\n    \\n    /**\\n     * @dev Create a savings plan directly (no signature needed)\\n     * @param tokenAddress The token you want to save\\n     * @param recipientAddress Who receives the savings\\n     * @param dailyAmount How much to save each day\\n     * @param startDate When to start saving\\n     * @param endDate When to stop saving (0 = never)\\n     * @param extraData Any additional data for this plan\\n     * @return planId The ID of your new savings plan\\n     */\\n    function createPlan(\\n        address tokenAddress,\\n        address recipientAddress,\\n        uint256 dailyAmount,\\n        uint256 startDate,\\n        uint256 endDate,\\n        bytes calldata extraData\\n    ) external returns (bytes32 planId) {\\n        require(tokenAddress != address(0), \\\"Invalid token\\\");\\n        require(recipientAddress != address(0), \\\"Invalid recipient\\\");\\n        require(dailyAmount > 0, \\\"Amount must be positive\\\");\\n        \\n        // Get next plan number for this user\\n        uint256 planNumber = userPlanCount[msg.sender]++;\\n        \\n        // Create plan ID\\n        planId = _hashPlan(\\n            msg.sender,\\n            tokenAddress,\\n            recipientAddress,\\n            dailyAmount,\\n            startDate,\\n            endDate,\\n            planNumber\\n        );\\n        \\n        // Create the savings plan\\n        SavingsPlan memory plan = SavingsPlan({\\n            saver: msg.sender,\\n            token: tokenAddress,\\n            recipient: recipientAddress,\\n            dailyAmount: dailyAmount,\\n            startDate: startDate > block.timestamp ? startDate : block.timestamp,\\n            endDate: endDate,\\n            lastTransferDate: block.timestamp,\\n            planNumber: planNumber,\\n            isActive: true\\n        });\\n        \\n        savingsPlans[planId] = plan;\\n        userPlans[msg.sender].push(planId);\\n        \\n        // Store any extra data\\n        if (extraData.length > 0) {\\n            _planData[planId] = extraData;\\n            emit PlanDataUpdated(planId, extraData);\\n        }\\n        \\n        // Ensure token has a yield configuration (even if it's 0%)\\n        if (tokenYieldConfigs[tokenAddress].yieldIndex == 0) {\\n            tokenYieldConfigs[tokenAddress] = TokenYieldConfig({\\n                yearlyYieldRate: 0,\\n                lastUpdateTime: block.timestamp,\\n                yieldIndex: YIELD_INDEX_PRECISION\\n            });\\n        }\\n        \\n        emit PlanCreated(planId, msg.sender, recipientAddress, dailyAmount);\\n    }\\n    \\n    /**\\n     * @dev Set yield rate for a token (owner only)\\n     * @param tokenAddress The token to configure\\n     * @param yearlyYieldRate Annual yield rate in basis points (e.g., 500 = 5%)\\n     */\\n    function setTokenYieldRate(address tokenAddress, uint256 yearlyYieldRate) external onlyOwner {\\n        require(tokenAddress != address(0), \\\"Invalid token\\\");\\n        require(yearlyYieldRate <= 10000, \\\"Rate too high\\\"); // Max 100%\\n        \\n        // Update index before changing rate\\n        _updateYieldIndex(tokenAddress);\\n        \\n        // If this is a new token, initialize its config\\n        if (tokenYieldConfigs[tokenAddress].yieldIndex == 0) {\\n            tokenYieldConfigs[tokenAddress] = TokenYieldConfig({\\n                yearlyYieldRate: yearlyYieldRate,\\n                lastUpdateTime: block.timestamp,\\n                yieldIndex: YIELD_INDEX_PRECISION\\n            });\\n        } else {\\n            // Update existing token's yield rate\\n            tokenYieldConfigs[tokenAddress].yearlyYieldRate = yearlyYieldRate;\\n        }\\n        \\n        emit YieldRateUpdated(tokenAddress, yearlyYieldRate);\\n    }\\n    \\n    /**\\n     * @dev Execute a specific plan (relayer or owner only)\\n     * @param planId Plan ID to execute\\n     * @return success Whether execution was successful\\n     */\\n    function executePlan(bytes32 planId) external onlyRelayer returns (bool success) {\\n        SavingsPlan storage plan = savingsPlans[planId];\\n        \\n        if (_isPlanReadyForTransfer(plan)) {\\n            _executePlan(planId);\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    /**\\n     * @dev Execute multiple plans at once (relayer only)\\n     * @param planIds Array of plan IDs to execute\\n     * @return executedCount Number of successfully executed plans\\n     */\\n    function executePlans(bytes32[] calldata planIds) external onlyRelayer returns (uint256 executedCount) {\\n        executedCount = 0;\\n        \\n        for (uint i = 0; i < planIds.length; i++) {\\n            SavingsPlan storage plan = savingsPlans[planIds[i]];\\n            \\n            if (_isPlanReadyForTransfer(plan)) {\\n                _executePlan(planIds[i]);\\n                executedCount++;\\n            }\\n        }\\n        \\n        emit BatchExecutionCompleted(executedCount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Get executable plans for a token (relayer only)\\n     * @param tokenAddress Token address to filter by\\n     * @param maxResults Maximum number of results to return\\n     * @return planIds Array of executable plan IDs\\n     */\\n    function getExecutablePlans(address tokenAddress, uint256 maxResults) \\n        external \\n        view \\n        onlyRelayer \\n        returns (bytes32[] memory planIds) \\n    {\\n        // Create fixed-size array for results\\n        bytes32[] memory results = new bytes32[](maxResults);\\n        uint256 count = 0;\\n        \\n        // This implementation is simplified and should be optimized in production\\n        address[] memory savers = _getActiveSavers();\\n        \\n        for (uint i = 0; i < savers.length && count < maxResults; i++) {\\n            bytes32[] memory saverPlans = userPlans[savers[i]];\\n            \\n            for (uint j = 0; j < saverPlans.length && count < maxResults; j++) {\\n                bytes32 planId = saverPlans[j];\\n                SavingsPlan storage plan = savingsPlans[planId];\\n                \\n                if (_isPlanReadyForTransfer(plan) && \\n                    (tokenAddress == address(0) || plan.token == tokenAddress)) {\\n                    results[count] = planId;\\n                    count++;\\n                }\\n            }\\n        }\\n        \\n        // Create right-sized array with just the results\\n        planIds = new bytes32[](count);\\n        for (uint i = 0; i < count; i++) {\\n            planIds[i] = results[i];\\n        }\\n        \\n        return planIds;\\n    }\\n    \\n    /**\\n     * @dev Internal function to update yield index for a token\\n     * @param tokenAddress Token to update\\n     */\\n    function _updateYieldIndex(address tokenAddress) internal {\\n        TokenYieldConfig storage config = tokenYieldConfigs[tokenAddress];\\n        \\n        // If token not configured or no time has passed, skip\\n        if (config.yieldIndex == 0 || block.timestamp <= config.lastUpdateTime) {\\n            return;\\n        }\\n        \\n        // Calculate time elapsed since last update\\n        uint256 timeElapsed = block.timestamp - config.lastUpdateTime;\\n        \\n        // Calculate new index\\n        if (config.yearlyYieldRate > 0 && timeElapsed > 0) {\\n            // Calculate yield for the period\\n            // Formula: current_index * (1 + (yield_rate * time_elapsed) / (365 days * 10000))\\n            uint256 yearInSeconds = 365 days;\\n            uint256 yieldFactor = config.yearlyYieldRate * timeElapsed;\\n            uint256 denominator = yearInSeconds * BASIS_POINTS;\\n            \\n            // Calculate yield with precision\\n            uint256 indexDelta = (config.yieldIndex * yieldFactor) / denominator;\\n            config.yieldIndex += indexDelta;\\n        }\\n        \\n        // Update last update time\\n        config.lastUpdateTime = block.timestamp;\\n    }\\n    \\n    /**\\n     * @dev Internal function to claim yield for a user\\n     * @param user User address\\n     * @param tokenAddress Token address\\n     */\\n    function _claimYield(address user, address tokenAddress) internal {\\n        TokenYieldConfig storage config = tokenYieldConfigs[tokenAddress];\\n        uint256 userBalance = userTokenBalances[user][tokenAddress];\\n        \\n        // If user has no balance or token not configured, return\\n        if (userBalance == 0 || config.yieldIndex == 0) {\\n            return;\\n        }\\n        \\n        uint256 userIndex = userYieldIndexes[user][tokenAddress];\\n        if (userIndex == 0) {\\n            // If user index not initialized, set it to current index\\n            userYieldIndexes[user][tokenAddress] = config.yieldIndex;\\n            return;\\n        }\\n        \\n        if (config.yieldIndex <= userIndex) {\\n            return; // No yield to claim\\n        }\\n        \\n        // Calculate yield amount\\n        // Formula: balance * (current_index - user_index) / PRECISION\\n        uint256 yieldAmount = (userBalance * (config.yieldIndex - userIndex)) / YIELD_INDEX_PRECISION;\\n        \\n        if (yieldAmount > 0) {\\n            // Update user's index\\n            userYieldIndexes[user][tokenAddress] = config.yieldIndex;\\n            \\n            // Add yield to user's balance\\n            userTokenBalances[user][tokenAddress] += yieldAmount;\\n            \\n            emit YieldClaimed(user, tokenAddress, yieldAmount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Authorize someone to help manage your plans\\n     * @param helper Address of the helper\\n     * @param isAuthorized Whether to authorize or remove authorization\\n     */\\n    function authorizeHelper(address helper, bool isAuthorized) external {\\n        authorizedHelpers[msg.sender][helper] = isAuthorized;\\n        emit HelperAuthorized(msg.sender, helper, isAuthorized);\\n    }\\n    \\n    /**\\n     * @dev Update extra data for a savings plan\\n     * @param planId ID of the plan to update\\n     * @param data New data to store\\n     */\\n    function updatePlanData(bytes32 planId, bytes calldata data) external {\\n        SavingsPlan storage plan = savingsPlans[planId];\\n        \\n        require(plan.saver != address(0), \\\"Plan doesn't exist\\\");\\n        require(\\n            msg.sender == plan.saver || authorizedHelpers[plan.saver][msg.sender],\\n            \\\"Not authorized\\\"\\n        );\\n        \\n        _planData[planId] = data;\\n        emit PlanDataUpdated(planId, data);\\n    }\\n    \\n    /**\\n     * @dev Cancel a savings plan\\n     * @param planId ID of the plan to cancel\\n     */\\n    function cancelPlan(bytes32 planId) external {\\n        SavingsPlan storage plan = savingsPlans[planId];\\n        \\n        require(plan.saver != address(0), \\\"Plan doesn't exist\\\");\\n        require(msg.sender == plan.saver, \\\"Not your plan\\\");\\n        require(plan.isActive, \\\"Plan already inactive\\\");\\n        \\n        plan.isActive = false;\\n        \\n        // Store cancellation data\\n        bytes memory cancelData = abi.encode(\\\"CANCELLED\\\", block.timestamp);\\n        _planData[planId] = cancelData;\\n        \\n        emit PlanCancelled(planId, msg.sender);\\n        emit PlanDataUpdated(planId, cancelData);\\n    }\\n    \\n    /**\\n     * @dev Update execution parameters (owner only)\\n     * @param newDailyInterval New interval between executions\\n     * @param newExecutionWindow New execution window after interval\\n     */\\n    function setExecutionParameters(uint256 newDailyInterval, uint256 newExecutionWindow) external onlyOwner {\\n        require(newDailyInterval >= 1 hours, \\\"Interval too short\\\");\\n        require(newExecutionWindow <= newDailyInterval, \\\"Window exceeds interval\\\");\\n        \\n        dailyTransferInterval = newDailyInterval;\\n        executionWindow = newExecutionWindow;\\n    }\\n    \\n    /**\\n     * @dev Internal function to execute a savings plan\\n     * @param planId ID of the plan to execute\\n     */\\n    function _executePlan(bytes32 planId) internal {\\n        SavingsPlan storage plan = savingsPlans[planId];\\n        \\n        if (!_isPlanReadyForTransfer(plan)) {\\n            return;\\n        }\\n        \\n        // Check if plan has been cancelled via data\\n        bytes memory data = _planData[planId];\\n        if (data.length >= 32) {\\n            // Check for cancellation\\n            bytes32 firstWord;\\n            assembly {\\n                firstWord := mload(add(data, 32))\\n            }\\n            if (firstWord == keccak256(\\\"CANCELLED\\\")) {\\n                return;\\n            }\\n        }\\n        \\n        // Check if user has enough balance in vault\\n        // First, update yield to ensure user has latest balance\\n        _updateYieldIndex(plan.token);\\n        _claimYield(plan.saver, plan.token);\\n        \\n        if (userTokenBalances[plan.saver][plan.token] < plan.dailyAmount) {\\n            return; // Not enough balance\\n        }\\n        \\n        // Mark plan as executed\\n        plan.lastTransferDate = block.timestamp;\\n        \\n        // Update balances - deduct from user's balance in vault\\n        userTokenBalances[plan.saver][plan.token] -= plan.dailyAmount;\\n        \\n        // Add to recipient's balance if they are also a vault user\\n        if (userYieldIndexes[plan.recipient][plan.token] > 0) {\\n            userTokenBalances[plan.recipient][plan.token] += plan.dailyAmount;\\n        } else {\\n            // Otherwise send tokens to recipient\\n            IERC20(plan.token).transfer(plan.recipient, plan.dailyAmount);\\n            totalTokenDeposits[plan.token] -= plan.dailyAmount;\\n        }\\n        \\n        emit PlanExecuted(planId, plan.dailyAmount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @dev Check if a plan is ready for transfer\\n     * @param plan The plan to check\\n     * @return isReady Whether the plan is ready for transfer\\n     */\\n    function _isPlanReadyForTransfer(SavingsPlan storage plan) internal view returns (bool) {\\n        return (\\n            plan.isActive && \\n            block.timestamp >= plan.startDate && \\n            (plan.endDate == 0 || block.timestamp <= plan.endDate) &&\\n            block.timestamp >= plan.lastTransferDate + dailyTransferInterval - executionWindow\\n        );\\n    }\\n    \\n    /**\\n     * @dev Create a unique hash for a savings plan\\n     */\\n    function _hashPlan(\\n        address saver,\\n        address token,\\n        address recipient,\\n        uint256 dailyAmount,\\n        uint256 startDate,\\n        uint256 endDate,\\n        uint256 planNumber\\n    ) internal view returns (bytes32) {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                PLAN_TYPEHASH,\\n                saver,\\n                token,\\n                recipient,\\n                dailyAmount,\\n                startDate,\\n                endDate,\\n                planNumber\\n            )\\n        );\\n        \\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash)\\n        );\\n    }\\n    \\n    /**\\n     * @dev Verify a signature for a savings plan\\n     * @param planId Hash of the plan\\n     * @param signature Signature to verify\\n     * @return signer Address that signed the plan\\n     */\\n    function _verifyPlanSignature(bytes32 planId, bytes calldata signature) internal pure returns (address) {\\n        return planId.toEthSignedMessageHash().recover(signature);\\n    }\\n    \\n    /**\\n     * @dev Get list of active savers\\n     * @return savers Array of active saver addresses\\n     */\\n    function _getActiveSavers() internal view returns (address[] memory) {\\n        // In a real implementation, you would track active savers efficiently\\n        // This is simplified for demonstration purposes\\n        address[] memory savers = new address[](1);\\n        savers[0] = address(0); // Placeholder\\n        return savers;\\n    }\\n    \\n    /**\\n     * @dev Get all plans for a specific saver\\n     * @param saver Saver's address\\n     * @return planIds Array of plan IDs\\n     */\\n    function getSaverPlans(address saver) external view returns (bytes32[] memory) {\\n        return userPlans[saver];\\n    }\\n    \\n    /**\\n     * @dev Get details for a specific plan\\n     * @param planId ID of the plan\\n     * @return plan Plan details\\n     */\\n    function getPlan(bytes32 planId) external view returns (SavingsPlan memory) {\\n        return savingsPlans[planId];\\n    }\\n    \\n    /**\\n     * @dev Get user's token balance including pending yield\\n     * @param user User address\\n     * @param tokenAddress Token address\\n     * @return balance User's total balance including pending yield\\n     */\\n    function getUserTotalBalance(address user, address tokenAddress) external view returns (uint256) {\\n        uint256 baseBalance = userTokenBalances[user][tokenAddress];\\n        if (baseBalance == 0) return 0;\\n        \\n        TokenYieldConfig memory config = tokenYieldConfigs[tokenAddress];\\n        uint256 userIndex = userYieldIndexes[user][tokenAddress];\\n        \\n        // If no index or no yield, return base balance\\n        if (userIndex == 0 || config.yieldIndex <= userIndex) {\\n            return baseBalance;\\n        }\\n        \\n        // Calculate yield based on current index\\n        uint256 pendingYield = (baseBalance * (config.yieldIndex - userIndex)) / YIELD_INDEX_PRECISION;\\n        return baseBalance + pendingYield;\\n    }\\n    \\n    /**\\n     * @dev Get current yield rate for a token\\n     * @param tokenAddress Token address\\n     * @return rate Annual yield rate in basis points\\n     */\\n    function getTokenYieldRate(address tokenAddress) external view returns (uint256) {\\n        return tokenYieldConfigs[tokenAddress].yearlyYieldRate;\\n    }\\n    \\n    /**\\n     * @dev Calculate pending yield for a user\\n     * @param user User address\\n     * @param tokenAddress Token address\\n     * @return pendingYield Amount of pending yield\\n     */\\n    function getPendingYield(address user, address tokenAddress) external view returns (uint256) {\\n        uint256 baseBalance = userTokenBalances[user][tokenAddress];\\n        if (baseBalance == 0) return 0;\\n        \\n        TokenYieldConfig memory config = tokenYieldConfigs[tokenAddress];\\n        uint256 userIndex = userYieldIndexes[user][tokenAddress];\\n        \\n        if (userIndex == 0 || config.yieldIndex <= userIndex) {\\n            return 0;\\n        }\\n        \\n        // Calculate current index including time since last update\\n        uint256 currentIndex = config.yieldIndex;\\n        if (block.timestamp > config.lastUpdateTime && config.yearlyYieldRate > 0) {\\n            uint256 timeElapsed = block.timestamp - config.lastUpdateTime;\\n            uint256 yearInSeconds = 365 days;\\n            uint256 yieldFactor = config.yearlyYieldRate * timeElapsed;\\n            uint256 denominator = yearInSeconds * BASIS_POINTS;\\n            uint256 indexDelta = (currentIndex * yieldFactor) / denominator;\\n            currentIndex += indexDelta;\\n        }\\n        \\n        // Calculate yield based on current index\\n        return (baseBalance * (currentIndex - userIndex)) / YIELD_INDEX_PRECISION;\\n    }\\n}\",\"keccak256\":\"0xfc1c94f0b8fa0367a62ef5dbd076b470ef4ada40132430aad3550cc562db95ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405262015180600c55612a30600d5534801561001d57600080fd5b50338061004457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004d8161018c565b506001808055604080518082018252601c81527f5969656c64536176696e67735661756c745769746852656c617965720000000060209182015281518083018352928352603160f81b9281019290925280517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f928101929092527f93df1103deb7bc0acc7161dec47f49237fdf28cc1817672577af0fc586d5357c908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181528282528051602091820120608052336000818152600a835292909220805460ff19166001908117909155835290917f4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c43910160405180910390a26101dc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805161329e6101fe6000396000818161030201526123e5015261329e6000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063831820f011610130578063c3776e6e116100b8578063ef51b7581161007c578063ef51b7581461065c578063f0fc539f1461066f578063f2fde38b14610696578063f3fef3a3146106a9578063fa8e7ed3146106bc57600080fd5b8063c3776e6e14610607578063d55742cc1461061a578063e1f1c4a71461062d578063e834946d14610636578063ecd8dc3a1461064957600080fd5b8063999927df116100ff578063999927df146105875780639ca12d7b1461059a578063a08af5b2146105c1578063a0f73826146105d4578063bde4592c146105f457600080fd5b8063831820f0146104e65780638da5cb5b146104f957806398b5dddd14610514578063994a8a1c1461055e57600080fd5b806345f2d105116101be5780635b9acc2c116101825780635b9acc2c146104715780635f4f3f231461049c578063715018a6146104bc5780637ad63326146104c4578063811eb7f0146104d757600080fd5b806345f2d1051461032457806347e7ef241461034f5780634c935590146103625780634d279b9e146103825780635963e4ff1461044357600080fd5b8063243d82f611610205578063243d82f61461029b57806326ebb35b146102a45780632893e770146102b757806329e295c5146102ca5780633644e515146102fd57600080fd5b806312f4d3141461023757806317c5993a1461026a5780631b0279f2146102735780631c18ced614610288575b600080fd5b610257610245366004612a3f565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b610257600d5481565b610286610281366004612aaa565b6106cf565b005b610257610296366004612af6565b6107ef565b610257600c5481565b6102576102b2366004612b6d565b6108df565b6102866102c5366004612c22565b610c5b565b6102ed6102d8366004612a3f565b600a6020526000908152604090205460ff1681565b6040519015158152602001610261565b6102577f000000000000000000000000000000000000000000000000000000000000000081565b610257610332366004612c44565b600260209081526000928352604080842090915290825290205481565b61028661035d366004612c77565b610d05565b610375610370366004612c77565b610f5b565b6040516102619190612ca1565b6103ee610390366004612ce4565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008909701546001600160a01b0396871698958716979690941695929491939192909160ff1689565b604080516001600160a01b039a8b168152988a1660208a015296909816958701959095526060860193909352608085019190915260a084015260c083015260e082015290151561010082015261012001610261565b6102ed610451366004612c44565b600960209081526000928352604080842090915290825290205460ff1681565b61025761047f366004612c44565b600360209081526000928352604080842090915290825290205481565b6102576104aa366004612a3f565b60056020526000908152604090205481565b610286611200565b6102576104d2366004612c44565b611214565b610257670de0b6b3a764000081565b6102576104f4366004612c77565b611303565b6000546040516001600160a01b039091168152602001610261565b610543610522366004612a3f565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610261565b61025761056c366004612a3f565b6001600160a01b031660009081526004602052604090205490565b610286610595366004612a3f565b611334565b6102577fb8e3599eac2048e8ade8153abf0daaf8279e5be5deb24fc64857b989ce84a2f481565b6102866105cf366004612d0b565b61135b565b6105e76105e2366004612ce4565b6113c7565b6040516102619190612d42565b610286610602366004612ce4565b6114c0565b610286610615366004612c77565b61166e565b6102ed610628366004612ce4565b6117bf565b61025761271081565b610375610644366004612a3f565b611827565b610286610657366004612d0b565b611893565b61025761066a366004612dbf565b611949565b6102577f02b33d7f3c253ee46f879dd431f2035238e54ecb5c043eea5c931283680c203a81565b6102866106a4366004612a3f565b611c67565b6102866106b7366004612c77565b611ca2565b6102576106ca366004612c44565b611e67565b600083815260066020526040902080546001600160a01b031661072e5760405162461bcd60e51b8152602060048201526012602482015271141b185b88191bd95cdb89dd08195e1a5cdd60721b60448201526064015b60405180910390fd5b80546001600160a01b031633148061076a575080546001600160a01b0316600090815260096020908152604080832033845290915290205460ff165b6107a75760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610725565b60008481526007602052604090206107c0838583612ee0565b508360008051602061324983398151915284846040516107e1929190612fa0565b60405180910390a250505050565b336000908152600a602052604081205460ff1661081e5760405162461bcd60e51b815260040161072590612fcf565b506000805b828110156108a05760006006600086868581811061084357610843613006565b905060200201358152602001908152602001600020905061086381611fbd565b156108975761088985858481811061087d5761087d613006565b90506020020135612023565b8261089381613032565b9350505b50600101610823565b50604080518281524260208201527fde781b57579de0538a6e6181c8be502cede35db52d09af8ba0d337ceb0739916910160405180910390a192915050565b60006001600160a01b038a166109075760405162461bcd60e51b81526004016107259061304b565b6001600160a01b0389166109515760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610725565b600088116109715760405162461bcd60e51b815260040161072590613072565b336000908152600b602052604081208054908261098d83613032565b9190505590506109a2338c8c8c8c8c87612353565b915060006109b183888861242f565b90506001600160a01b03811633146109ff5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610725565b6000604051806101200160405280336001600160a01b031681526020018e6001600160a01b031681526020018d6001600160a01b031681526020018c8152602001428c11610a4d5742610a4f565b8b5b815260208082018c90524260408084019190915260608084018890526001608094850181905260008a81526006808652848220885181546001600160a01b03199081166001600160a01b039283161783558a890151838701805483169184169190911790558a880151600284018054909216921691909117905593880151600385015595870151600484015560a0870151600584015560c08701519583019590955560e086015160078301556101008601516008928301805460ff191691151591909117905533855290835290832080549182018155835291200185905590508415610b78576000848152600760205260409020610b4e868883612ee0565b50836000805160206132498339815191528787604051610b6f929190612fa0565b60405180910390a25b6001600160a01b038d166000908152600460205260408120600201549003610c0557604051806060016040528060008152602001428152602001670de0b6b3a7640000815250600460008f6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b604080516001600160a01b038e168152602081018d9052339186917f0b5f9939edb0526ea97e679627c344f00a09a4a27ea6fc4d7151cdc9cfbaa6ba910160405180910390a35050509998505050505050505050565b610c63612484565b610e10821015610caa5760405162461bcd60e51b8152602060048201526012602482015271125b9d195c9d985b081d1bdbc81cda1bdc9d60721b6044820152606401610725565b81811115610cfa5760405162461bcd60e51b815260206004820152601760248201527f57696e646f77206578636565647320696e74657276616c0000000000000000006044820152606401610725565b600c91909155600d55565b610d0d6124b1565b6001600160a01b038216610d335760405162461bcd60e51b81526004016107259061304b565b60008111610d535760405162461bcd60e51b815260040161072590613072565b6001600160a01b038216600090815260046020526040902054610db85760405162461bcd60e51b815260206004820152601d60248201527f546f6b656e206e6f7420737570706f7274656420666f72207969656c640000006044820152606401610725565b610dc1826124db565b6001600160a01b0382166000818152600460209081526040808320600290810154338552908352818420948452939091528120549003610e26573360009081526003602090815260408083206001600160a01b03871684529091529020819055610e30565b610e3033846125ab565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af1158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea791906130a9565b503360009081526002602090815260408083206001600160a01b038716845290915281208054849290610edb9084906130c6565b90915550506001600160a01b03831660009081526005602052604081208054849290610f089084906130c6565b90915550506040518281526001600160a01b0384169033907ff1444b5cad7ce70cb018d1b8edc8618fe303f3c7f034d8d572a6e27facbf2bef9060200160405180910390a350610f5760018055565b5050565b336000908152600a602052604090205460609060ff16610f8d5760405162461bcd60e51b815260040161072590612fcf565b60008267ffffffffffffffff811115610fa857610fa8612e41565b604051908082528060200260200182016040528015610fd1578160200160208202803683370190505b509050600080610fdf61274e565b905060005b815181108015610ff357508583105b156111655760006008600084848151811061101057611010613006565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561108257602002820191906000526020600020905b81548152602001906001019080831161106e575b5050505050905060005b81518110801561109b57508785105b156111505760008282815181106110b4576110b4613006565b6020026020010151905060006006600083815260200190815260200160002090506110de81611fbd565b801561110a57506001600160a01b038b16158061110a575060018101546001600160a01b038c81169116145b1561113b578188888151811061112257611122613006565b60209081029190910101528661113781613032565b9750505b5050808061114890613032565b91505061108c565b5050808061115d90613032565b915050610fe4565b508167ffffffffffffffff81111561117f5761117f612e41565b6040519080825280602002602001820160405280156111a8578160200160208202803683370190505b50935060005b828110156111f5578381815181106111c8576111c8613006565b60200260200101518582815181106111e2576111e2613006565b60209081029190910101526001016111ae565b505050505b92915050565b611208612484565b61121260006127a6565b565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205480820361124d5760009150506111fa565b6001600160a01b0380841660008181526004602090815260408083208151606081018352815481526001820154818501526002909101548183015294891683526003825280832093835292905220548015806112ad575080826040015111155b156112bd578293505050506111fa565b6000670de0b6b3a76400008284604001516112d891906130d9565b6112e290866130ec565b6112ec9190613103565b90506112f881856130c6565b979650505050505050565b6008602052816000526040600020818154811061131f57600080fd5b90600052602060002001600091509150505481565b61133c6124b1565b611345816124db565b61134f33826125ab565b61135860018055565b50565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f2d5c4dd6ebe074068e697993c252a56de5af0883b105e6e5a5eabe4d513bc8d4910160405180910390a35050565b61143360405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5060009081526006602081815260409283902083516101208101855281546001600160a01b03908116825260018301548116938201939093526002820154909216938201939093526003830154606082015260048301546080820152600583015460a08201529082015460c0820152600782015460e082015260089091015460ff16151561010082015290565b600081815260066020526040902080546001600160a01b031661151a5760405162461bcd60e51b8152602060048201526012602482015271141b185b88191bd95cdb89dd08195e1a5cdd60721b6044820152606401610725565b80546001600160a01b031633146115635760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab910383630b760991b6044820152606401610725565b600881015460ff166115af5760405162461bcd60e51b8152602060048201526015602482015274506c616e20616c726561647920696e61637469766560581b6044820152606401610725565b60088101805460ff191690556040805160208101829052600960608201526810d05390d15313115160ba1b6080820152429181019190915260009060a00160408051601f1981840301815291815260008581526007602052209091506116158282613125565b50604051339084907f02667651b7ff0ad10c8713b2574650305ca8dc0130ed2df2a59d7d837d61deef90600090a3826000805160206132498339815191528260405161166191906131e4565b60405180910390a2505050565b611676612484565b6001600160a01b03821661169c5760405162461bcd60e51b81526004016107259061304b565b6127108111156116de5760405162461bcd60e51b815260206004820152600d60248201526c0a4c2e8ca40e8dede40d0d2ced609b1b6044820152606401610725565b6116e7826124db565b6001600160a01b038216600090815260046020526040812060020154900361175c5760408051606081018252828152426020808301918252670de0b6b3a76400008385019081526001600160a01b03871660009081526004909252939020915182555160018201559051600290910155611778565b6001600160a01b03821660009081526004602052604090208190555b816001600160a01b03167f8c40390db560782efda093b2b24fca89e60374af432f4c675688fa8b61108eab826040516117b391815260200190565b60405180910390a25050565b336000908152600a602052604081205460ff166117ee5760405162461bcd60e51b815260040161072590612fcf565b600082815260066020526040902061180581611fbd565b1561181c5761181383612023565b50600192915050565b60009150505b919050565b6001600160a01b03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561188757602002820191906000526020600020905b815481526020019060010190808311611873575b50505050509050919050565b61189b612484565b6001600160a01b0382166118f15760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642072656c6179657220616464726573730000000000000000006044820152606401610725565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c4391016117b3565b60006001600160a01b0388166119715760405162461bcd60e51b81526004016107259061304b565b6001600160a01b0387166119bb5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610725565b600086116119db5760405162461bcd60e51b815260040161072590613072565b336000908152600b60205260408120805490826119f783613032565b919050559050611a0c338a8a8a8a8a87612353565b91506000604051806101200160405280336001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001428911611a5c5742611a5e565b885b815260208082018990524260408084019190915260608084018790526001608094850181905260008981526006808652848220885181546001600160a01b03199081166001600160a01b039283161783558a890151838701805483169184169190911790558a880151600284018054909216921691909117905593880151600385015595870151600484015560a0870151600584015560c08701519583019590955560e086015160078301556101008601516008928301805460ff191691151591909117905533855290835290832080549182018155835291200184905590508315611b87576000838152600760205260409020611b5d858783612ee0565b50826000805160206132498339815191528686604051611b7e929190612fa0565b60405180910390a25b6001600160a01b038a166000908152600460205260408120600201549003611c1457604051806060016040528060008152602001428152602001670de0b6b3a7640000815250600460008c6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b604080516001600160a01b038b168152602081018a9052339185917f0b5f9939edb0526ea97e679627c344f00a09a4a27ea6fc4d7151cdc9cfbaa6ba910160405180910390a35050979650505050505050565b611c6f612484565b6001600160a01b038116611c9957604051631e4fbdf760e01b815260006004820152602401610725565b611358816127a6565b611caa6124b1565b60008111611cca5760405162461bcd60e51b815260040161072590613072565b3360009081526002602090815260408083206001600160a01b0386168452909152902054811115611d345760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610725565b611d3d826124db565b611d4733836125ab565b3360009081526002602090815260408083206001600160a01b038616845290915281208054839290611d7a9084906130d9565b90915550506001600160a01b03821660009081526005602052604081208054839290611da79084906130d9565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d91906130a9565b506040518181526001600160a01b0383169033907f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e56209060200160405180910390a3610f5760018055565b6001600160a01b038083166000908152600260209081526040808320938516835292905290812054808203611ea05760009150506111fa565b6001600160a01b038084166000818152600460209081526040808320815160608101835281548152600182015481850152600290910154818301529489168352600382528083209383529290522054801580611f00575080826040015111155b15611f1157600093505050506111fa565b6040820151602083015142118015611f295750825115155b15611f96576000836020015142611f4091906130d9565b84519091506301e1338090600090611f599084906130ec565b90506000611f69612710846130ec565b9050600081611f7884886130ec565b611f829190613103565b9050611f8e81876130c6565b955050505050505b670de0b6b3a7640000611fa983836130d9565b611fb390866130ec565b6112f89190613103565b600881015460009060ff168015611fd8575081600401544210155b8015611ff4575060058201541580611ff4575081600501544211155b80156111fa5750600d54600c54836006015461201091906130c6565b61201a91906130d9565b42101592915050565b600081815260066020526040902061203a81611fbd565b612042575050565b6000828152600760205260408120805461205b90612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461208790612e57565b80156120d45780601f106120a9576101008083540402835291602001916120d4565b820191906000526020600020905b8154815290600101906020018083116120b757829003601f168201915b5050505050905060208151106121185760208101517fc910afae5a97b943f4e955224bddd8cd39793b72c271073e91e8b4d99ee0fc0d81016121165750505050565b505b600182015461212f906001600160a01b03166124db565b8154600183015461214c916001600160a01b0390811691166125ab565b600382015482546001600160a01b039081166000908152600260209081526040808320600188015490941683529290522054101561218957505050565b426006830155600382015482546001600160a01b0390811660009081526002602090815260408083206001880154909416835292905290812080549091906121d29084906130d9565b909155505060028201546001600160a01b0390811660009081526003602090815260408083206001870154909416835292905220541561225c5760038201546002808401546001600160a01b039081166000908152602092835260408082206001880154909316825291909252812080549091906122519084906130c6565b909155506123179050565b60018201546002830154600384015460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df91906130a9565b50600382015460018301546001600160a01b0316600090815260056020526040812080549091906123119084906130d9565b90915550505b60038201546040805191825242602083015284917f0dcff691f0b07d64e21612cd5009ae109a7d58655d4a8b29c4607421b1593ff69101611661565b604080517f02b33d7f3c253ee46f879dd431f2035238e54ecb5c043eea5c931283680c203a6020808301919091526001600160a01b03998a1682840152978916606082015295909716608086015260a085019390935260c084019190915260e083015261010080830191909152835180830390910181526101208201845280519083012061190160f01b6101408301527f00000000000000000000000000000000000000000000000000000000000000006101428301526101628083019190915283518083039091018152610182909101909252815191012090565b600061247c83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061247692508891506127f69050565b90612829565b949350505050565b6000546001600160a01b031633146112125760405163118cdaa760e01b8152336004820152602401610725565b6002600154036124d457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6001600160a01b038116600090815260046020526040902060028101541580612508575080600101544211155b15612511575050565b600081600101544261252391906130d9565b8254909150158015906125365750600081115b156125a05781546301e13380906000906125519084906130ec565b90506000612561612710846130ec565b905060008183876002015461257691906130ec565b6125809190613103565b90508086600201600082825461259691906130c6565b9091555050505050505b504260019091015550565b6001600160a01b03808216600081815260046020908152604080832094871683526002825280832093835292905220548015806125ea57506002820154155b156125f55750505050565b6001600160a01b03808516600090815260036020908152604080832093871683529290529081205490819003612657575050600201546001600160a01b0392831660009081526003602090815260408083209490951682529290925291902055565b80836002015411612669575050505050565b6000670de0b6b3a764000082856002015461268491906130d9565b61268e90856130ec565b6126989190613103565b90508015612746576002808501546001600160a01b038089166000818152600360209081526040808320948c168084529482528083209590955591815293815282842091845252812080548392906126f19084906130c6565b92505081905550846001600160a01b0316866001600160a01b03167ff3055bc8d92d9c8d2f12b45d112dd345cd2cfd17292b8d65c5642ac6f912dfd78360405161273d91815260200190565b60405180910390a35b505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905060008160008151811061278957612789613006565b6001600160a01b0390921660209283029190910190910152919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000806128398686612853565b92509250925061284982826128a0565b5090949350505050565b6000806000835160410361288d5760208401516040850151606086015160001a61287f88828585612959565b955095509550505050612899565b50508151600091506002905b9250925092565b60008260038111156128b4576128b4613232565b036128bd575050565b60018260038111156128d1576128d1613232565b036128ef5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561290357612903613232565b036129245760405163fce698f760e01b815260048101829052602401610725565b600382600381111561293857612938613232565b03610f57576040516335e2f38360e21b815260048101829052602401610725565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156129945750600091506003905082612a1e565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156129e8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a1457506000925060019150829050612a1e565b9250600091508190505b9450945094915050565b80356001600160a01b038116811461182257600080fd5b600060208284031215612a5157600080fd5b612a5a82612a28565b9392505050565b60008083601f840112612a7357600080fd5b50813567ffffffffffffffff811115612a8b57600080fd5b602083019150836020828501011115612aa357600080fd5b9250929050565b600080600060408486031215612abf57600080fd5b83359250602084013567ffffffffffffffff811115612add57600080fd5b612ae986828701612a61565b9497909650939450505050565b60008060208385031215612b0957600080fd5b823567ffffffffffffffff811115612b2057600080fd5b8301601f81018513612b3157600080fd5b803567ffffffffffffffff811115612b4857600080fd5b8560208260051b8401011115612b5d57600080fd5b6020919091019590945092505050565b600080600080600080600080600060e08a8c031215612b8b57600080fd5b612b948a612a28565b9850612ba260208b01612a28565b975060408a0135965060608a0135955060808a0135945060a08a013567ffffffffffffffff811115612bd357600080fd5b612bdf8c828d01612a61565b90955093505060c08a013567ffffffffffffffff811115612bff57600080fd5b612c0b8c828d01612a61565b915080935050809150509295985092959850929598565b60008060408385031215612c3557600080fd5b50508035926020909101359150565b60008060408385031215612c5757600080fd5b612c6083612a28565b9150612c6e60208401612a28565b90509250929050565b60008060408385031215612c8a57600080fd5b612c9383612a28565b946020939093013593505050565b602080825282518282018190526000918401906040840190835b81811015612cd9578351835260209384019390920191600101612cbb565b509095945050505050565b600060208284031215612cf657600080fd5b5035919050565b801515811461135857600080fd5b60008060408385031215612d1e57600080fd5b612d2783612a28565b91506020830135612d3781612cfd565b809150509250929050565b81516001600160a01b0390811682526020808401518216908301526040808401519182169083015261012082019050606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151612db861010084018215159052565b5092915050565b600080600080600080600060c0888a031215612dda57600080fd5b612de388612a28565b9650612df160208901612a28565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115612e2257600080fd5b612e2e8a828b01612a61565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612e6b57607f821691505b602082108103612e8b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612edb57806000526020600020601f840160051c81016020851015612eb85750805b601f840160051c820191505b81811015612ed85760008155600101612ec4565b50505b505050565b67ffffffffffffffff831115612ef857612ef8612e41565b612f0c83612f068354612e57565b83612e91565b6000601f841160018114612f405760008515612f285750838201355b600019600387901b1c1916600186901b178355612ed8565b600083815260209020601f19861690835b82811015612f715786850135825560209485019460019092019101612f51565b5086821015612f8e5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526019908201527f4e6f7420616e20617574686f72697a65642072656c6179657200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016130445761304461301c565b5060010190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b60208082526017908201527f416d6f756e74206d75737420626520706f736974697665000000000000000000604082015260600190565b6000602082840312156130bb57600080fd5b8151612a5a81612cfd565b808201808211156111fa576111fa61301c565b818103818111156111fa576111fa61301c565b80820281158282048414176111fa576111fa61301c565b60008261312057634e487b7160e01b600052601260045260246000fd5b500490565b815167ffffffffffffffff81111561313f5761313f612e41565b6131538161314d8454612e57565b84612e91565b6020601f821160018114613187576000831561316f5750848201515b600019600385901b1c1916600184901b178455612ed8565b600084815260208120601f198516915b828110156131b75787850151825560209485019460019092019101613197565b50848210156131d55786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b602081526000825180602084015260005b8181101561321257602081860181015160408684010152016131f5565b506000604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b600052602160045260246000fdfe9cbe785715f800329031f3b381a18aaa611efce8d201c68e4344e1174408756ba264697066735822122030e3c4da12ceac3e2ebcab40bf603d4e21d795efd917932803d2454c489abc0564736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c8063831820f011610130578063c3776e6e116100b8578063ef51b7581161007c578063ef51b7581461065c578063f0fc539f1461066f578063f2fde38b14610696578063f3fef3a3146106a9578063fa8e7ed3146106bc57600080fd5b8063c3776e6e14610607578063d55742cc1461061a578063e1f1c4a71461062d578063e834946d14610636578063ecd8dc3a1461064957600080fd5b8063999927df116100ff578063999927df146105875780639ca12d7b1461059a578063a08af5b2146105c1578063a0f73826146105d4578063bde4592c146105f457600080fd5b8063831820f0146104e65780638da5cb5b146104f957806398b5dddd14610514578063994a8a1c1461055e57600080fd5b806345f2d105116101be5780635b9acc2c116101825780635b9acc2c146104715780635f4f3f231461049c578063715018a6146104bc5780637ad63326146104c4578063811eb7f0146104d757600080fd5b806345f2d1051461032457806347e7ef241461034f5780634c935590146103625780634d279b9e146103825780635963e4ff1461044357600080fd5b8063243d82f611610205578063243d82f61461029b57806326ebb35b146102a45780632893e770146102b757806329e295c5146102ca5780633644e515146102fd57600080fd5b806312f4d3141461023757806317c5993a1461026a5780631b0279f2146102735780631c18ced614610288575b600080fd5b610257610245366004612a3f565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b610257600d5481565b610286610281366004612aaa565b6106cf565b005b610257610296366004612af6565b6107ef565b610257600c5481565b6102576102b2366004612b6d565b6108df565b6102866102c5366004612c22565b610c5b565b6102ed6102d8366004612a3f565b600a6020526000908152604090205460ff1681565b6040519015158152602001610261565b6102577f000000000000000000000000000000000000000000000000000000000000000081565b610257610332366004612c44565b600260209081526000928352604080842090915290825290205481565b61028661035d366004612c77565b610d05565b610375610370366004612c77565b610f5b565b6040516102619190612ca1565b6103ee610390366004612ce4565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549686015460078701546008909701546001600160a01b0396871698958716979690941695929491939192909160ff1689565b604080516001600160a01b039a8b168152988a1660208a015296909816958701959095526060860193909352608085019190915260a084015260c083015260e082015290151561010082015261012001610261565b6102ed610451366004612c44565b600960209081526000928352604080842090915290825290205460ff1681565b61025761047f366004612c44565b600360209081526000928352604080842090915290825290205481565b6102576104aa366004612a3f565b60056020526000908152604090205481565b610286611200565b6102576104d2366004612c44565b611214565b610257670de0b6b3a764000081565b6102576104f4366004612c77565b611303565b6000546040516001600160a01b039091168152602001610261565b610543610522366004612a3f565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610261565b61025761056c366004612a3f565b6001600160a01b031660009081526004602052604090205490565b610286610595366004612a3f565b611334565b6102577fb8e3599eac2048e8ade8153abf0daaf8279e5be5deb24fc64857b989ce84a2f481565b6102866105cf366004612d0b565b61135b565b6105e76105e2366004612ce4565b6113c7565b6040516102619190612d42565b610286610602366004612ce4565b6114c0565b610286610615366004612c77565b61166e565b6102ed610628366004612ce4565b6117bf565b61025761271081565b610375610644366004612a3f565b611827565b610286610657366004612d0b565b611893565b61025761066a366004612dbf565b611949565b6102577f02b33d7f3c253ee46f879dd431f2035238e54ecb5c043eea5c931283680c203a81565b6102866106a4366004612a3f565b611c67565b6102866106b7366004612c77565b611ca2565b6102576106ca366004612c44565b611e67565b600083815260066020526040902080546001600160a01b031661072e5760405162461bcd60e51b8152602060048201526012602482015271141b185b88191bd95cdb89dd08195e1a5cdd60721b60448201526064015b60405180910390fd5b80546001600160a01b031633148061076a575080546001600160a01b0316600090815260096020908152604080832033845290915290205460ff165b6107a75760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610725565b60008481526007602052604090206107c0838583612ee0565b508360008051602061324983398151915284846040516107e1929190612fa0565b60405180910390a250505050565b336000908152600a602052604081205460ff1661081e5760405162461bcd60e51b815260040161072590612fcf565b506000805b828110156108a05760006006600086868581811061084357610843613006565b905060200201358152602001908152602001600020905061086381611fbd565b156108975761088985858481811061087d5761087d613006565b90506020020135612023565b8261089381613032565b9350505b50600101610823565b50604080518281524260208201527fde781b57579de0538a6e6181c8be502cede35db52d09af8ba0d337ceb0739916910160405180910390a192915050565b60006001600160a01b038a166109075760405162461bcd60e51b81526004016107259061304b565b6001600160a01b0389166109515760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610725565b600088116109715760405162461bcd60e51b815260040161072590613072565b336000908152600b602052604081208054908261098d83613032565b9190505590506109a2338c8c8c8c8c87612353565b915060006109b183888861242f565b90506001600160a01b03811633146109ff5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610725565b6000604051806101200160405280336001600160a01b031681526020018e6001600160a01b031681526020018d6001600160a01b031681526020018c8152602001428c11610a4d5742610a4f565b8b5b815260208082018c90524260408084019190915260608084018890526001608094850181905260008a81526006808652848220885181546001600160a01b03199081166001600160a01b039283161783558a890151838701805483169184169190911790558a880151600284018054909216921691909117905593880151600385015595870151600484015560a0870151600584015560c08701519583019590955560e086015160078301556101008601516008928301805460ff191691151591909117905533855290835290832080549182018155835291200185905590508415610b78576000848152600760205260409020610b4e868883612ee0565b50836000805160206132498339815191528787604051610b6f929190612fa0565b60405180910390a25b6001600160a01b038d166000908152600460205260408120600201549003610c0557604051806060016040528060008152602001428152602001670de0b6b3a7640000815250600460008f6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b604080516001600160a01b038e168152602081018d9052339186917f0b5f9939edb0526ea97e679627c344f00a09a4a27ea6fc4d7151cdc9cfbaa6ba910160405180910390a35050509998505050505050505050565b610c63612484565b610e10821015610caa5760405162461bcd60e51b8152602060048201526012602482015271125b9d195c9d985b081d1bdbc81cda1bdc9d60721b6044820152606401610725565b81811115610cfa5760405162461bcd60e51b815260206004820152601760248201527f57696e646f77206578636565647320696e74657276616c0000000000000000006044820152606401610725565b600c91909155600d55565b610d0d6124b1565b6001600160a01b038216610d335760405162461bcd60e51b81526004016107259061304b565b60008111610d535760405162461bcd60e51b815260040161072590613072565b6001600160a01b038216600090815260046020526040902054610db85760405162461bcd60e51b815260206004820152601d60248201527f546f6b656e206e6f7420737570706f7274656420666f72207969656c640000006044820152606401610725565b610dc1826124db565b6001600160a01b0382166000818152600460209081526040808320600290810154338552908352818420948452939091528120549003610e26573360009081526003602090815260408083206001600160a01b03871684529091529020819055610e30565b610e3033846125ab565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af1158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea791906130a9565b503360009081526002602090815260408083206001600160a01b038716845290915281208054849290610edb9084906130c6565b90915550506001600160a01b03831660009081526005602052604081208054849290610f089084906130c6565b90915550506040518281526001600160a01b0384169033907ff1444b5cad7ce70cb018d1b8edc8618fe303f3c7f034d8d572a6e27facbf2bef9060200160405180910390a350610f5760018055565b5050565b336000908152600a602052604090205460609060ff16610f8d5760405162461bcd60e51b815260040161072590612fcf565b60008267ffffffffffffffff811115610fa857610fa8612e41565b604051908082528060200260200182016040528015610fd1578160200160208202803683370190505b509050600080610fdf61274e565b905060005b815181108015610ff357508583105b156111655760006008600084848151811061101057611010613006565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561108257602002820191906000526020600020905b81548152602001906001019080831161106e575b5050505050905060005b81518110801561109b57508785105b156111505760008282815181106110b4576110b4613006565b6020026020010151905060006006600083815260200190815260200160002090506110de81611fbd565b801561110a57506001600160a01b038b16158061110a575060018101546001600160a01b038c81169116145b1561113b578188888151811061112257611122613006565b60209081029190910101528661113781613032565b9750505b5050808061114890613032565b91505061108c565b5050808061115d90613032565b915050610fe4565b508167ffffffffffffffff81111561117f5761117f612e41565b6040519080825280602002602001820160405280156111a8578160200160208202803683370190505b50935060005b828110156111f5578381815181106111c8576111c8613006565b60200260200101518582815181106111e2576111e2613006565b60209081029190910101526001016111ae565b505050505b92915050565b611208612484565b61121260006127a6565b565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205480820361124d5760009150506111fa565b6001600160a01b0380841660008181526004602090815260408083208151606081018352815481526001820154818501526002909101548183015294891683526003825280832093835292905220548015806112ad575080826040015111155b156112bd578293505050506111fa565b6000670de0b6b3a76400008284604001516112d891906130d9565b6112e290866130ec565b6112ec9190613103565b90506112f881856130c6565b979650505050505050565b6008602052816000526040600020818154811061131f57600080fd5b90600052602060002001600091509150505481565b61133c6124b1565b611345816124db565b61134f33826125ab565b61135860018055565b50565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f2d5c4dd6ebe074068e697993c252a56de5af0883b105e6e5a5eabe4d513bc8d4910160405180910390a35050565b61143360405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5060009081526006602081815260409283902083516101208101855281546001600160a01b03908116825260018301548116938201939093526002820154909216938201939093526003830154606082015260048301546080820152600583015460a08201529082015460c0820152600782015460e082015260089091015460ff16151561010082015290565b600081815260066020526040902080546001600160a01b031661151a5760405162461bcd60e51b8152602060048201526012602482015271141b185b88191bd95cdb89dd08195e1a5cdd60721b6044820152606401610725565b80546001600160a01b031633146115635760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab910383630b760991b6044820152606401610725565b600881015460ff166115af5760405162461bcd60e51b8152602060048201526015602482015274506c616e20616c726561647920696e61637469766560581b6044820152606401610725565b60088101805460ff191690556040805160208101829052600960608201526810d05390d15313115160ba1b6080820152429181019190915260009060a00160408051601f1981840301815291815260008581526007602052209091506116158282613125565b50604051339084907f02667651b7ff0ad10c8713b2574650305ca8dc0130ed2df2a59d7d837d61deef90600090a3826000805160206132498339815191528260405161166191906131e4565b60405180910390a2505050565b611676612484565b6001600160a01b03821661169c5760405162461bcd60e51b81526004016107259061304b565b6127108111156116de5760405162461bcd60e51b815260206004820152600d60248201526c0a4c2e8ca40e8dede40d0d2ced609b1b6044820152606401610725565b6116e7826124db565b6001600160a01b038216600090815260046020526040812060020154900361175c5760408051606081018252828152426020808301918252670de0b6b3a76400008385019081526001600160a01b03871660009081526004909252939020915182555160018201559051600290910155611778565b6001600160a01b03821660009081526004602052604090208190555b816001600160a01b03167f8c40390db560782efda093b2b24fca89e60374af432f4c675688fa8b61108eab826040516117b391815260200190565b60405180910390a25050565b336000908152600a602052604081205460ff166117ee5760405162461bcd60e51b815260040161072590612fcf565b600082815260066020526040902061180581611fbd565b1561181c5761181383612023565b50600192915050565b60009150505b919050565b6001600160a01b03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561188757602002820191906000526020600020905b815481526020019060010190808311611873575b50505050509050919050565b61189b612484565b6001600160a01b0382166118f15760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642072656c6179657220616464726573730000000000000000006044820152606401610725565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c4391016117b3565b60006001600160a01b0388166119715760405162461bcd60e51b81526004016107259061304b565b6001600160a01b0387166119bb5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610725565b600086116119db5760405162461bcd60e51b815260040161072590613072565b336000908152600b60205260408120805490826119f783613032565b919050559050611a0c338a8a8a8a8a87612353565b91506000604051806101200160405280336001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001428911611a5c5742611a5e565b885b815260208082018990524260408084019190915260608084018790526001608094850181905260008981526006808652848220885181546001600160a01b03199081166001600160a01b039283161783558a890151838701805483169184169190911790558a880151600284018054909216921691909117905593880151600385015595870151600484015560a0870151600584015560c08701519583019590955560e086015160078301556101008601516008928301805460ff191691151591909117905533855290835290832080549182018155835291200184905590508315611b87576000838152600760205260409020611b5d858783612ee0565b50826000805160206132498339815191528686604051611b7e929190612fa0565b60405180910390a25b6001600160a01b038a166000908152600460205260408120600201549003611c1457604051806060016040528060008152602001428152602001670de0b6b3a7640000815250600460008c6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b604080516001600160a01b038b168152602081018a9052339185917f0b5f9939edb0526ea97e679627c344f00a09a4a27ea6fc4d7151cdc9cfbaa6ba910160405180910390a35050979650505050505050565b611c6f612484565b6001600160a01b038116611c9957604051631e4fbdf760e01b815260006004820152602401610725565b611358816127a6565b611caa6124b1565b60008111611cca5760405162461bcd60e51b815260040161072590613072565b3360009081526002602090815260408083206001600160a01b0386168452909152902054811115611d345760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610725565b611d3d826124db565b611d4733836125ab565b3360009081526002602090815260408083206001600160a01b038616845290915281208054839290611d7a9084906130d9565b90915550506001600160a01b03821660009081526005602052604081208054839290611da79084906130d9565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d91906130a9565b506040518181526001600160a01b0383169033907f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e56209060200160405180910390a3610f5760018055565b6001600160a01b038083166000908152600260209081526040808320938516835292905290812054808203611ea05760009150506111fa565b6001600160a01b038084166000818152600460209081526040808320815160608101835281548152600182015481850152600290910154818301529489168352600382528083209383529290522054801580611f00575080826040015111155b15611f1157600093505050506111fa565b6040820151602083015142118015611f295750825115155b15611f96576000836020015142611f4091906130d9565b84519091506301e1338090600090611f599084906130ec565b90506000611f69612710846130ec565b9050600081611f7884886130ec565b611f829190613103565b9050611f8e81876130c6565b955050505050505b670de0b6b3a7640000611fa983836130d9565b611fb390866130ec565b6112f89190613103565b600881015460009060ff168015611fd8575081600401544210155b8015611ff4575060058201541580611ff4575081600501544211155b80156111fa5750600d54600c54836006015461201091906130c6565b61201a91906130d9565b42101592915050565b600081815260066020526040902061203a81611fbd565b612042575050565b6000828152600760205260408120805461205b90612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461208790612e57565b80156120d45780601f106120a9576101008083540402835291602001916120d4565b820191906000526020600020905b8154815290600101906020018083116120b757829003601f168201915b5050505050905060208151106121185760208101517fc910afae5a97b943f4e955224bddd8cd39793b72c271073e91e8b4d99ee0fc0d81016121165750505050565b505b600182015461212f906001600160a01b03166124db565b8154600183015461214c916001600160a01b0390811691166125ab565b600382015482546001600160a01b039081166000908152600260209081526040808320600188015490941683529290522054101561218957505050565b426006830155600382015482546001600160a01b0390811660009081526002602090815260408083206001880154909416835292905290812080549091906121d29084906130d9565b909155505060028201546001600160a01b0390811660009081526003602090815260408083206001870154909416835292905220541561225c5760038201546002808401546001600160a01b039081166000908152602092835260408082206001880154909316825291909252812080549091906122519084906130c6565b909155506123179050565b60018201546002830154600384015460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df91906130a9565b50600382015460018301546001600160a01b0316600090815260056020526040812080549091906123119084906130d9565b90915550505b60038201546040805191825242602083015284917f0dcff691f0b07d64e21612cd5009ae109a7d58655d4a8b29c4607421b1593ff69101611661565b604080517f02b33d7f3c253ee46f879dd431f2035238e54ecb5c043eea5c931283680c203a6020808301919091526001600160a01b03998a1682840152978916606082015295909716608086015260a085019390935260c084019190915260e083015261010080830191909152835180830390910181526101208201845280519083012061190160f01b6101408301527f00000000000000000000000000000000000000000000000000000000000000006101428301526101628083019190915283518083039091018152610182909101909252815191012090565b600061247c83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061247692508891506127f69050565b90612829565b949350505050565b6000546001600160a01b031633146112125760405163118cdaa760e01b8152336004820152602401610725565b6002600154036124d457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6001600160a01b038116600090815260046020526040902060028101541580612508575080600101544211155b15612511575050565b600081600101544261252391906130d9565b8254909150158015906125365750600081115b156125a05781546301e13380906000906125519084906130ec565b90506000612561612710846130ec565b905060008183876002015461257691906130ec565b6125809190613103565b90508086600201600082825461259691906130c6565b9091555050505050505b504260019091015550565b6001600160a01b03808216600081815260046020908152604080832094871683526002825280832093835292905220548015806125ea57506002820154155b156125f55750505050565b6001600160a01b03808516600090815260036020908152604080832093871683529290529081205490819003612657575050600201546001600160a01b0392831660009081526003602090815260408083209490951682529290925291902055565b80836002015411612669575050505050565b6000670de0b6b3a764000082856002015461268491906130d9565b61268e90856130ec565b6126989190613103565b90508015612746576002808501546001600160a01b038089166000818152600360209081526040808320948c168084529482528083209590955591815293815282842091845252812080548392906126f19084906130c6565b92505081905550846001600160a01b0316866001600160a01b03167ff3055bc8d92d9c8d2f12b45d112dd345cd2cfd17292b8d65c5642ac6f912dfd78360405161273d91815260200190565b60405180910390a35b505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905060008160008151811061278957612789613006565b6001600160a01b0390921660209283029190910190910152919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000806128398686612853565b92509250925061284982826128a0565b5090949350505050565b6000806000835160410361288d5760208401516040850151606086015160001a61287f88828585612959565b955095509550505050612899565b50508151600091506002905b9250925092565b60008260038111156128b4576128b4613232565b036128bd575050565b60018260038111156128d1576128d1613232565b036128ef5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561290357612903613232565b036129245760405163fce698f760e01b815260048101829052602401610725565b600382600381111561293857612938613232565b03610f57576040516335e2f38360e21b815260048101829052602401610725565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156129945750600091506003905082612a1e565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156129e8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a1457506000925060019150829050612a1e565b9250600091508190505b9450945094915050565b80356001600160a01b038116811461182257600080fd5b600060208284031215612a5157600080fd5b612a5a82612a28565b9392505050565b60008083601f840112612a7357600080fd5b50813567ffffffffffffffff811115612a8b57600080fd5b602083019150836020828501011115612aa357600080fd5b9250929050565b600080600060408486031215612abf57600080fd5b83359250602084013567ffffffffffffffff811115612add57600080fd5b612ae986828701612a61565b9497909650939450505050565b60008060208385031215612b0957600080fd5b823567ffffffffffffffff811115612b2057600080fd5b8301601f81018513612b3157600080fd5b803567ffffffffffffffff811115612b4857600080fd5b8560208260051b8401011115612b5d57600080fd5b6020919091019590945092505050565b600080600080600080600080600060e08a8c031215612b8b57600080fd5b612b948a612a28565b9850612ba260208b01612a28565b975060408a0135965060608a0135955060808a0135945060a08a013567ffffffffffffffff811115612bd357600080fd5b612bdf8c828d01612a61565b90955093505060c08a013567ffffffffffffffff811115612bff57600080fd5b612c0b8c828d01612a61565b915080935050809150509295985092959850929598565b60008060408385031215612c3557600080fd5b50508035926020909101359150565b60008060408385031215612c5757600080fd5b612c6083612a28565b9150612c6e60208401612a28565b90509250929050565b60008060408385031215612c8a57600080fd5b612c9383612a28565b946020939093013593505050565b602080825282518282018190526000918401906040840190835b81811015612cd9578351835260209384019390920191600101612cbb565b509095945050505050565b600060208284031215612cf657600080fd5b5035919050565b801515811461135857600080fd5b60008060408385031215612d1e57600080fd5b612d2783612a28565b91506020830135612d3781612cfd565b809150509250929050565b81516001600160a01b0390811682526020808401518216908301526040808401519182169083015261012082019050606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151612db861010084018215159052565b5092915050565b600080600080600080600060c0888a031215612dda57600080fd5b612de388612a28565b9650612df160208901612a28565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115612e2257600080fd5b612e2e8a828b01612a61565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612e6b57607f821691505b602082108103612e8b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612edb57806000526020600020601f840160051c81016020851015612eb85750805b601f840160051c820191505b81811015612ed85760008155600101612ec4565b50505b505050565b67ffffffffffffffff831115612ef857612ef8612e41565b612f0c83612f068354612e57565b83612e91565b6000601f841160018114612f405760008515612f285750838201355b600019600387901b1c1916600186901b178355612ed8565b600083815260209020601f19861690835b82811015612f715786850135825560209485019460019092019101612f51565b5086821015612f8e5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526019908201527f4e6f7420616e20617574686f72697a65642072656c6179657200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016130445761304461301c565b5060010190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b60208082526017908201527f416d6f756e74206d75737420626520706f736974697665000000000000000000604082015260600190565b6000602082840312156130bb57600080fd5b8151612a5a81612cfd565b808201808211156111fa576111fa61301c565b818103818111156111fa576111fa61301c565b80820281158282048414176111fa576111fa61301c565b60008261312057634e487b7160e01b600052601260045260246000fd5b500490565b815167ffffffffffffffff81111561313f5761313f612e41565b6131538161314d8454612e57565b84612e91565b6020601f821160018114613187576000831561316f5750848201515b600019600385901b1c1916600184901b178455612ed8565b600084815260208120601f198516915b828110156131b75787850151825560209485019460019092019101613197565b50848210156131d55786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b602081526000825180602084015260005b8181101561321257602081860181015160408684010152016131f5565b506000604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b600052602160045260246000fdfe9cbe785715f800329031f3b381a18aaa611efce8d201c68e4344e1174408756ba264697066735822122030e3c4da12ceac3e2ebcab40bf603d4e21d795efd917932803d2454c489abc0564736f6c634300081a0033",
  "devdoc": {
    "details": "A vault that automates daily savings transfers using relayers and generates yield on deposits",
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "authorizeHelper(address,bool)": {
        "details": "Authorize someone to help manage your plans",
        "params": {
          "helper": "Address of the helper",
          "isAuthorized": "Whether to authorize or remove authorization"
        }
      },
      "cancelPlan(bytes32)": {
        "details": "Cancel a savings plan",
        "params": {
          "planId": "ID of the plan to cancel"
        }
      },
      "claimYield(address)": {
        "details": "Claim accumulated yield",
        "params": {
          "tokenAddress": "Token to claim yield for"
        }
      },
      "constructor": {
        "details": "Sets up the contract with security parameters"
      },
      "createPlan(address,address,uint256,uint256,uint256,bytes)": {
        "details": "Create a savings plan directly (no signature needed)",
        "params": {
          "dailyAmount": "How much to save each day",
          "endDate": "When to stop saving (0 = never)",
          "extraData": "Any additional data for this plan",
          "recipientAddress": "Who receives the savings",
          "startDate": "When to start saving",
          "tokenAddress": "The token you want to save"
        },
        "returns": {
          "planId": "The ID of your new savings plan"
        }
      },
      "createPlanWithSignature(address,address,uint256,uint256,uint256,bytes,bytes)": {
        "details": "Create a savings plan with your signature",
        "params": {
          "dailyAmount": "How much to save each day",
          "endDate": "When to stop saving (0 = never)",
          "extraData": "Any additional data for this plan",
          "recipientAddress": "Who receives the savings",
          "signature": "Your signature confirming this plan",
          "startDate": "When to start saving",
          "tokenAddress": "The token you want to save"
        },
        "returns": {
          "planId": "The ID of the created plan"
        }
      },
      "deposit(address,uint256)": {
        "details": "Deposit tokens into the vault to earn yield",
        "params": {
          "amount": "How much to deposit",
          "tokenAddress": "The token to deposit"
        }
      },
      "executePlan(bytes32)": {
        "details": "Execute a specific plan (relayer or owner only)",
        "params": {
          "planId": "Plan ID to execute"
        },
        "returns": {
          "success": "Whether execution was successful"
        }
      },
      "executePlans(bytes32[])": {
        "details": "Execute multiple plans at once (relayer only)",
        "params": {
          "planIds": "Array of plan IDs to execute"
        },
        "returns": {
          "executedCount": "Number of successfully executed plans"
        }
      },
      "getExecutablePlans(address,uint256)": {
        "details": "Get executable plans for a token (relayer only)",
        "params": {
          "maxResults": "Maximum number of results to return",
          "tokenAddress": "Token address to filter by"
        },
        "returns": {
          "planIds": "Array of executable plan IDs"
        }
      },
      "getPendingYield(address,address)": {
        "details": "Calculate pending yield for a user",
        "params": {
          "tokenAddress": "Token address",
          "user": "User address"
        },
        "returns": {
          "_0": "pendingYield Amount of pending yield"
        }
      },
      "getPlan(bytes32)": {
        "details": "Get details for a specific plan",
        "params": {
          "planId": "ID of the plan"
        },
        "returns": {
          "_0": "plan Plan details"
        }
      },
      "getSaverPlans(address)": {
        "details": "Get all plans for a specific saver",
        "params": {
          "saver": "Saver's address"
        },
        "returns": {
          "_0": "planIds Array of plan IDs"
        }
      },
      "getTokenYieldRate(address)": {
        "details": "Get current yield rate for a token",
        "params": {
          "tokenAddress": "Token address"
        },
        "returns": {
          "_0": "rate Annual yield rate in basis points"
        }
      },
      "getUserTotalBalance(address,address)": {
        "details": "Get user's token balance including pending yield",
        "params": {
          "tokenAddress": "Token address",
          "user": "User address"
        },
        "returns": {
          "_0": "balance User's total balance including pending yield"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExecutionParameters(uint256,uint256)": {
        "details": "Update execution parameters (owner only)",
        "params": {
          "newDailyInterval": "New interval between executions",
          "newExecutionWindow": "New execution window after interval"
        }
      },
      "setRelayer(address,bool)": {
        "details": "Add or remove a relayer",
        "params": {
          "isAuthorized": "Whether to authorize or remove",
          "relayer": "Address of the relayer"
        }
      },
      "setTokenYieldRate(address,uint256)": {
        "details": "Set yield rate for a token (owner only)",
        "params": {
          "tokenAddress": "The token to configure",
          "yearlyYieldRate": "Annual yield rate in basis points (e.g., 500 = 5%)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePlanData(bytes32,bytes)": {
        "details": "Update extra data for a savings plan",
        "params": {
          "data": "New data to store",
          "planId": "ID of the plan to update"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Withdraw tokens from the vault",
        "params": {
          "amount": "How much to withdraw",
          "tokenAddress": "The token to withdraw"
        }
      }
    },
    "title": "YieldSavingsVaultWithRelayer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 318,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5563,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "userTokenBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5569,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "userYieldIndexes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5574,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "tokenYieldConfigs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(TokenYieldConfig)5557_storage)"
      },
      {
        "astId": 5578,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "totalTokenDeposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5583,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "savingsPlans",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(SavingsPlan)5550_storage)"
      },
      {
        "astId": 5587,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "_planData",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5592,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "userPlans",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 5598,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "authorizedHelpers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5602,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "authorizedRelayers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5606,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "userPlanCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5621,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "dailyTransferInterval",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5624,
        "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
        "label": "executionWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenYieldConfig)5557_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldSavingsVaultWithRelayer.TokenYieldConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenYieldConfig)5557_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_struct(SavingsPlan)5550_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct YieldSavingsVaultWithRelayer.SavingsPlan)",
        "numberOfBytes": "32",
        "value": "t_struct(SavingsPlan)5550_storage"
      },
      "t_struct(SavingsPlan)5550_storage": {
        "encoding": "inplace",
        "label": "struct YieldSavingsVaultWithRelayer.SavingsPlan",
        "members": [
          {
            "astId": 5533,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "saver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5535,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5537,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "recipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5539,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "dailyAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5541,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5543,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "endDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5545,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "lastTransferDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5547,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "planNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5549,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "isActive",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(TokenYieldConfig)5557_storage": {
        "encoding": "inplace",
        "label": "struct YieldSavingsVaultWithRelayer.TokenYieldConfig",
        "members": [
          {
            "astId": 5552,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "yearlyYieldRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5554,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5556,
            "contract": "contracts/DailySavingsManager.sol:YieldSavingsVaultWithRelayer",
            "label": "yieldIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}