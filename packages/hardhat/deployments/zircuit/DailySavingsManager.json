{
  "address": "0x1c1b4D1D79b248EC46Ac25E380A044ea6e312b38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "RelayerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SubscriptionCancelled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedRelayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "cancelFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "executeWithTokenData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getSubscriptionWithPayload",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerDay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecuted",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            }
          ],
          "internalType": "struct DailySavingsManager.Subscription",
          "name": "subscription",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "tokenPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "setRelayerAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerDay",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "subscribeWithEIP712",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "subscribeWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "subscribeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastExecuted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requiredPrefund",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfefeb5cece9bd5cd1a8497aec4abd9071424195d3e96ba12bfad2e8e04f270a3",
  "receipt": {
    "to": null,
    "from": "0x15E6c77f52a5043747643979a73dA45CfE094cfa",
    "contractAddress": "0x1c1b4D1D79b248EC46Ac25E380A044ea6e312b38",
    "transactionIndex": 0,
    "gasUsed": "1783665",
    "logsBloom": "0x
    "blockHash": "0xece450eeca5e1ef5a4d79bb707dfb24f163054cd86413056a73685bac53a1825",
    "transactionHash": "0xfefeb5cece9bd5cd1a8497aec4abd9071424195d3e96ba12bfad2e8e04f270a3",
    "logs": [],
    "blockNumber": 21971602,
    "cumulativeGasUsed": "1783665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0576a174D229E3cFA37253523E645A78A0C91B57"
  ],
  "numDeployments": 1,
  "solcInputHash": "5cf400cd6814b6a846cdd0f27c279bf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"RelayerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SubscriptionCancelled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRelayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cancelFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"executeWithTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSubscriptionWithPayload\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecuted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"internalType\":\"struct DailySavingsManager.Subscription\",\"name\":\"subscription\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"tokenPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setRelayerAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"subscribeWithEIP712\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"subscribeWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"subscribeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecuted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredPrefund\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A subscription manager for daily savings transfers with ERC-4337 and EIP-7702 support\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{\"cancel()\":{\"details\":\"Cancel subscription\"},\"cancelFor(address)\":{\"details\":\"Cancel subscription for another user (only callable by authorized relayers)\",\"params\":{\"user\":\"Address of the user to cancel subscription for\"}},\"constructor\":{\"details\":\"Constructor sets the EntryPoint and domain separator\",\"params\":{\"_entryPoint\":\"Address of the ERC-4337 EntryPoint contract\"}},\"execute(address,address)\":{\"details\":\"Execute a subscription transfer\",\"params\":{\"tokenAddress\":\"Token contract address for the transfer\",\"user\":\"User whose subscription to execute\"}},\"execute(address,bytes)\":{\"details\":\"Function to execute arbitrary contract calls (for ERC-4337 compatibility)\",\"params\":{\"data\":\"Call data\",\"target\":\"Address to call\"},\"returns\":{\"result\":\"Return data from the call\"}},\"executeBatch(address[],address)\":{\"details\":\"Execute multiple subscription transfers (gas efficient)\",\"params\":{\"tokenAddress\":\"Token contract address for the transfers\",\"users\":\"Array of users whose subscriptions to execute\"}},\"executeWithTokenData(address,address)\":{\"details\":\"Execute subscription using EIP-7702 token data\",\"params\":{\"tokenAddress\":\"Token contract address for the transfer\",\"user\":\"User whose subscription to execute\"}},\"getSubscriptionWithPayload(address)\":{\"details\":\"Function to get subscription details with payload from EIP-7702 token\",\"params\":{\"user\":\"User address\"},\"returns\":{\"subscription\":\"Subscription details\",\"tokenPayload\":\"Token payload if available\"}},\"setRelayerAuthorization(address,bool)\":{\"details\":\"Set authorization for a relayer\",\"params\":{\"authorized\":\"Whether to authorize or deauthorize\",\"relayer\":\"Address of the relayer\"}},\"subscribe(address,uint256)\":{\"details\":\"Subscribe to daily savings\",\"params\":{\"amountPerDay\":\"Amount to transfer daily\",\"receiver\":\"Address to receive the daily transfers\"}},\"subscribeWithEIP712(address,address,uint256,uint256,uint256,address,bytes)\":{\"details\":\"Subscribe with EIP-712 signature and token binding\",\"params\":{\"amountPerDay\":\"Amount to transfer daily\",\"deadline\":\"Expiration timestamp for this signature\",\"receiver\":\"Address to receive the daily transfers\",\"signature\":\"EIP-712 signature\",\"tokenContract\":\"Address of the EIP-7702 compliant contract\",\"tokenId\":\"ID of the EIP-7702 token to bind subscription data to\",\"user\":\"User address that will provide the funds\"}},\"subscribeWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Subscribe with signature (meta-transaction)\",\"params\":{\"amountPerDay\":\"Amount to transfer daily\",\"deadline\":\"Expiration timestamp for this signature\",\"r\":\"ECDSA signature parameter r\",\"receiver\":\"Address to receive the daily transfers\",\"s\":\"ECDSA signature parameter s\",\"user\":\"User address that will provide the funds\",\"v\":\"ECDSA signature parameter v\"}},\"subscribeWithToken(address,uint256,uint256,address)\":{\"details\":\"Subscribe to daily savings with EIP-7702 token binding\",\"params\":{\"amountPerDay\":\"Amount to transfer daily\",\"receiver\":\"Address to receive the daily transfers\",\"tokenContract\":\"Address of the EIP-7702 compliant contract\",\"tokenId\":\"ID of the EIP-7702 token to bind subscription data to\"}},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Validate a UserOperation for ERC-4337\",\"params\":{\"requiredPrefund\":\"Amount of ETH required for prefunding\",\"userOp\":\"User operation to validate\"},\"returns\":{\"validationData\":\"Result of validation\"}}},\"title\":\"DailySavingsManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DailySavingsManager.sol\":\"DailySavingsManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/DailySavingsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// EIP-7702 interface\\ninterface IEIP7702 {\\n    function tokenData(uint256 tokenId) external view returns (bytes memory);\\n    event TokenDataUpdated(uint256 indexed tokenId, bytes data);\\n}\\n\\n// Simple interface for ERC-4337 EntryPoint\\ninterface IEntryPoint {\\n    struct UserOperation {\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n    \\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n}\\n\\n/**\\n * @title DailySavingsManager\\n * @dev A subscription manager for daily savings transfers with ERC-4337 and EIP-7702 support\\n */\\ncontract DailySavingsManager {\\n    using ECDSA for bytes32;\\n\\n    struct Subscription {\\n        address receiver;\\n        uint256 amountPerDay;\\n        uint256 lastExecuted;\\n        bool active;\\n        uint256 tokenId;        // EIP-7702 token ID (if used)\\n        address tokenContract;   // EIP-7702 token contract (if used)\\n    }\\n\\n    // Owner of the contract\\n    address public owner;\\n    // Nonce for EIP-712 signatures\\n    mapping(address => uint256) public nonces;\\n\\n    // User address to subscription details\\n    mapping(address => Subscription) public subscriptions;\\n    \\n    // Authorized relayers\\n    mapping(address => bool) public authorizedRelayers;\\n    \\n    // EntryPoint contract for ERC-4337\\n    address public immutable entryPoint;\\n    \\n    // Domain separator for EIP-712\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    \\n    // Type hash for subscription\\n    bytes32 public constant SUBSCRIPTION_TYPEHASH = keccak256(\\n        \\\"Subscription(address user,address receiver,uint256 amountPerDay,uint256 deadline,uint256 tokenId,address tokenContract,uint256 nonce)\\\"\\n    );\\n\\n    // Events\\n    event Subscribed(address indexed user, address indexed receiver, uint256 amount, uint256 tokenId, address tokenContract);\\n    event Executed(address indexed user, uint256 amount);\\n    event RelayerUpdated(address indexed relayer, bool authorized);\\n    event SubscriptionCancelled(address indexed user);\\n\\n    /**\\n     * @dev Constructor sets the EntryPoint and domain separator\\n     * @param _entryPoint Address of the ERC-4337 EntryPoint contract\\n     */\\n    \\n    constructor(address _entryPoint) {\\n        entryPoint = _entryPoint;\\n        owner = msg.sender;\\n\\n        authorizedRelayers[msg.sender] = true; // Optional: pre-authorize deployer\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(\\\"DailySavingsManager\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n\\n    /**\\n     * @dev Modifier to restrict function access to authorized relayers\\n     */\\n    modifier onlyRelayer() {\\n        require(authorizedRelayers[msg.sender], \\\"Caller not authorized relayer\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Modifier to restrict function access to the EntryPoint\\n     */\\n    modifier onlyEntryPoint() {\\n        require(msg.sender == entryPoint, \\\"Caller not EntryPoint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict function access to the contract owner\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Subscribe to daily savings\\n     * @param receiver Address to receive the daily transfers\\n     * @param amountPerDay Amount to transfer daily\\n     */\\n    function subscribe(address receiver, uint256 amountPerDay) external {\\n        _subscribe(msg.sender, receiver, amountPerDay, 0, address(0));\\n    }\\n    \\n    /**\\n     * @dev Subscribe to daily savings with EIP-7702 token binding\\n     * @param receiver Address to receive the daily transfers\\n     * @param amountPerDay Amount to transfer daily\\n     * @param tokenId ID of the EIP-7702 token to bind subscription data to\\n     * @param tokenContract Address of the EIP-7702 compliant contract\\n     */\\n    function subscribeWithToken(\\n        address receiver, \\n        uint256 amountPerDay, \\n        uint256 tokenId, \\n        address tokenContract\\n    ) external {\\n        require(tokenContract != address(0), \\\"Invalid token contract\\\");\\n        require(\\n            IERC165(tokenContract).supportsInterface(type(IEIP7702).interfaceId), \\n            \\\"Contract does not support EIP-7702\\\"\\n        );\\n        \\n        _subscribe(msg.sender, receiver, amountPerDay, tokenId, tokenContract);\\n    }\\n\\n    /**\\n     * @dev Subscribe with signature (meta-transaction)\\n     * @param user User address that will provide the funds\\n     * @param receiver Address to receive the daily transfers\\n     * @param amountPerDay Amount to transfer daily\\n     * @param deadline Expiration timestamp for this signature\\n     * @param v ECDSA signature parameter v\\n     * @param r ECDSA signature parameter r\\n     * @param s ECDSA signature parameter s\\n     */\\n    function subscribeWithSig(\\n        address user,\\n        address receiver,\\n        uint256 amountPerDay,\\n        uint256 deadline,\\n        uint8 v, bytes32 r, bytes32 s\\n    ) external {\\n        require(block.timestamp <= deadline, \\\"Expired\\\");\\n\\n        bytes32 hash = keccak256(abi.encodePacked(user, receiver, amountPerDay, deadline));\\n        bytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        address signer = ecrecover(ethSignedMessageHash, v, r, s);\\n        \\n        require(signer == user, \\\"Invalid signature\\\");\\n\\n        _subscribe(user, receiver, amountPerDay, 0, address(0));\\n    }\\n    \\n    /**\\n     * @dev Subscribe with EIP-712 signature and token binding\\n     * @param user User address that will provide the funds\\n     * @param receiver Address to receive the daily transfers\\n     * @param amountPerDay Amount to transfer daily\\n     * @param deadline Expiration timestamp for this signature\\n     * @param tokenId ID of the EIP-7702 token to bind subscription data to\\n     * @param tokenContract Address of the EIP-7702 compliant contract\\n     * @param signature EIP-712 signature\\n     */\\n    function subscribeWithEIP712(\\n        address user,\\n        address receiver,\\n        uint256 amountPerDay,\\n        uint256 deadline,\\n        uint256 tokenId,\\n        address tokenContract,\\n        bytes memory signature\\n    ) external {\\n        require(block.timestamp <= deadline, \\\"Expired\\\");\\n\\n        uint256 currentNonce = nonces[user];\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                SUBSCRIPTION_TYPEHASH,\\n                user,\\n                receiver,\\n                amountPerDay,\\n                deadline,\\n                tokenId,\\n                tokenContract,\\n                currentNonce\\n            )\\n        );\\n\\n        \\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash)\\n        );\\n        \\n        address signer = hash.recover(signature);\\n        require(signer == user, \\\"Invalid signature\\\");\\n        nonces[user]++; // prevent replay\\n\\n        _subscribe(user, receiver, amountPerDay, tokenId, tokenContract);\\n    }\\n\\n    /**\\n     * @dev Internal function to subscribe a user\\n     */\\n    function _subscribe(\\n        address user, \\n        address receiver, \\n        uint256 amountPerDay,\\n        uint256 tokenId,\\n        address tokenContract\\n    ) internal {\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n        require(amountPerDay > 0, \\\"Invalid amount\\\");\\n\\n        subscriptions[user] = Subscription({\\n            receiver: receiver,\\n            amountPerDay: amountPerDay,\\n            lastExecuted: block.timestamp,\\n            active: true,\\n            tokenId: tokenId,\\n            tokenContract: tokenContract\\n        });\\n\\n        emit Subscribed(user, receiver, amountPerDay, tokenId, tokenContract);\\n    }\\n\\n    /**\\n     * @dev Cancel subscription\\n     */\\n    function cancel() external {\\n        _cancelSubscription(msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Cancel subscription for another user (only callable by authorized relayers)\\n     * @param user Address of the user to cancel subscription for\\n     */\\n    function cancelFor(address user) external onlyRelayer {\\n        _cancelSubscription(user);\\n    }\\n    \\n    /**\\n     * @dev Internal function to cancel a subscription\\n     */\\n    function _cancelSubscription(address user) internal {\\n        Subscription storage sub = subscriptions[user];\\n        require(sub.active, \\\"Not active\\\");\\n        sub.active = false;\\n        \\n        emit SubscriptionCancelled(user);\\n    }\\n\\n    /**\\n     * @dev Execute a subscription transfer\\n     * @param user User whose subscription to execute\\n     * @param tokenAddress Token contract address for the transfer\\n     */\\n    function execute(address user, address tokenAddress) external {\\n        _executeSubscription(user, tokenAddress);\\n    }\\n    \\n    /**\\n     * @dev Execute multiple subscription transfers (gas efficient)\\n     * @param users Array of users whose subscriptions to execute\\n     * @param tokenAddress Token contract address for the transfers\\n     */\\n    function executeBatch(address[] calldata users, address tokenAddress) external {\\n        for (uint i = 0; i < users.length; i++) {\\n            _executeSubscription(users[i], tokenAddress);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Execute subscription using EIP-7702 token data\\n     * @param user User whose subscription to execute\\n     * @param tokenAddress Token contract address for the transfer\\n     */\\n    function executeWithTokenData(address user, address tokenAddress) external onlyRelayer {\\n        Subscription storage sub = subscriptions[user];\\n        require(sub.active, \\\"Not active\\\");\\n        require(block.timestamp >= sub.lastExecuted + 1 days, \\\"Too early\\\");\\n        require(sub.tokenId > 0 && sub.tokenContract != address(0), \\\"No token binding\\\");\\n        \\n        // Get subscription data from EIP-7702 token\\n        bytes memory tokenData = IEIP7702(sub.tokenContract).tokenData(sub.tokenId);\\n        \\n        // Validate the token data (e.g., checking permissions, expiration, etc.)\\n        require(tokenData.length > 0, \\\"Invalid token data\\\");\\n        \\n        // Execute the transfer\\n        sub.lastExecuted = block.timestamp;\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.transferFrom(user, sub.receiver, sub.amountPerDay), \\\"Transfer failed\\\");\\n        \\n        emit Executed(user, sub.amountPerDay);\\n    }\\n\\n    /**\\n     * @dev Internal function to execute a subscription\\n     */\\n    function _executeSubscription(address user, address tokenAddress) internal {\\n        Subscription storage sub = subscriptions[user];\\n        require(sub.active, \\\"Not active\\\");\\n        require(block.timestamp >= sub.lastExecuted + 1 days, \\\"Too early\\\");\\n\\n        sub.lastExecuted = block.timestamp;\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.transferFrom(user, sub.receiver, sub.amountPerDay), \\\"Transfer failed\\\");\\n\\n        emit Executed(user, sub.amountPerDay);\\n    }\\n    \\n    /**\\n     * @dev Set authorization for a relayer\\n     * @param relayer Address of the relayer\\n     * @param authorized Whether to authorize or deauthorize\\n     */\\n    function setRelayerAuthorization(address relayer, bool authorized) external onlyOwner {\\n        authorizedRelayers[relayer] = authorized;\\n        \\n        emit RelayerUpdated(relayer, authorized);\\n    }\\n    \\n    /**\\n     * @dev Validate a UserOperation for ERC-4337\\n     * @param userOp User operation to validate\\n     * @param requiredPrefund Amount of ETH required for prefunding\\n     * @return validationData Result of validation\\n     */\\n    function validateUserOp(\\n        IEntryPoint.UserOperation calldata userOp, \\n        bytes32 /*userOpHash*/, \\n        uint256 requiredPrefund\\n    ) external onlyEntryPoint returns (uint256 validationData) {\\n        // Decode calldata to get function selector and parameters\\n        (bytes4 selector, bytes memory params) = abi.decode(userOp.callData, (bytes4, bytes));\\n        \\n        // Perform validation based on the function being called\\n        // Return 0 for valid operations or timestamp until which the signature is valid\\n        \\n        // For simplicity, we'll just validate that the sender has enough ETH for prefunding\\n        require(address(this).balance >= requiredPrefund, \\\"Insufficient ETH for gas\\\");\\n        \\n        // Return 0 to indicate successful validation\\n        return 0;\\n    }\\n    \\n    /**\\n     * @dev Function to execute arbitrary contract calls (for ERC-4337 compatibility)\\n     * @param target Address to call\\n     * @param data Call data\\n     * @return result Return data from the call\\n     */\\n    function execute(address target, bytes calldata data) external onlyEntryPoint returns (bytes memory result) {\\n        (bool success, bytes memory returnData) = target.call(data);\\n        require(success, \\\"Transaction execution failed\\\");\\n        return returnData;\\n    }\\n    \\n    /**\\n     * @dev Function to get subscription details with payload from EIP-7702 token\\n     * @param user User address\\n     * @return subscription Subscription details\\n     * @return tokenPayload Token payload if available\\n     */\\n    function getSubscriptionWithPayload(address user) external view returns (\\n        Subscription memory subscription,\\n        bytes memory tokenPayload\\n    ) {\\n        subscription = subscriptions[user];\\n        \\n        // If subscription is bound to a token, get its data\\n        if (subscription.tokenId > 0 && subscription.tokenContract != address(0)) {\\n            try IEIP7702(subscription.tokenContract).tokenData(subscription.tokenId) returns (bytes memory data) {\\n                tokenPayload = data;\\n            } catch {\\n                // If call fails, return empty bytes\\n                tokenPayload = \\\"\\\";\\n            }\\n        } else {\\n            tokenPayload = \\\"\\\";\\n        }\\n        \\n        return (subscription, tokenPayload);\\n    }\\n    \\n    /**\\n     * @dev Receive function to accept ETH (required for ERC-4337 gas payments)\\n     */\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8d159eb46215e78aee962e2b86876c5a7fc8700f99b633087e7a4a43fd6e86ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161202438038061202483398101604081905261002f91610155565b6001600160a01b03166080908152600080546001600160a01b031916339081178255815260036020908152604091829020805460ff1916600190811790915582518084018452601381527f4461696c79536176696e67734d616e61676572000000000000000000000000009083015282518084018452908152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f070d9493e825d065026c3418f0b3c68360f7bbe98cc147c152613f5c3fc83128818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246938101939093523060a08085019190915282518085038201815260c090940190925282519201919091209052610185565b60006020828403121561016757600080fd5b81516001600160a01b038116811461017e57600080fd5b9392505050565b60805160a051611e656101bf600039600081816101d901526110a30152600081816103c2015281816104e301526107c50152611e656000f3fe6080604052600436106101235760003560e01c80637ecebe00116100a0578063b0d691fe11610064578063b0d691fe146103b0578063d80aea15146103e4578063ea8a1af014610404578063f046395a14610419578063f41d0480146104b657600080fd5b80637ecebe00146102d75780638da5cb5b146103045780638de692841461033c578063902fe7da1461035c5780639a7f640d1461037c57600080fd5b80633c2ccec0116100e75780633c2ccec01461022957806346a9d08c1461024957806348f2dd6e1461026957806352e03bd614610289578063666b9a5d146102b757600080fd5b80631cff79cd1461012f57806329e295c5146101655780632a992dfd146101a55780633644e515146101c75780633a871cdd1461020957600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004611761565b6104d6565b60405161015c9190611836565b60405180910390f35b34801561017157600080fd5b50610195610180366004611850565b60036020526000908152604090205460ff1681565b604051901515815260200161015c565b3480156101b157600080fd5b506101c56101c036600461186b565b610607565b005b3480156101d357600080fd5b506101fb7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161015c565b34801561021557600080fd5b506101fb6102243660046118de565b6107b8565b34801561023557600080fd5b506101c5610244366004611850565b6108a7565b34801561025557600080fd5b506101c5610264366004611940565b610912565b34801561027557600080fd5b506101c5610284366004611977565b6109b7565b34801561029557600080fd5b506102a96102a4366004611850565b610cd4565b60405161015c9291906119aa565b3480156102c357600080fd5b506101c56102d2366004611a10565b610e39565b3480156102e357600080fd5b506101fb6102f2366004611850565b60016020526000908152604090205481565b34801561031057600080fd5b50600054610324906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b34801561034857600080fd5b506101c5610357366004611a56565b610f61565b34801561036857600080fd5b506101c5610377366004611a80565b610f73565b34801561038857600080fd5b506101fb7ff6d482ff1197373e2efd7a8f42553a41b6b1239cbeba07e510cde1f3c31a30af81565b3480156103bc57600080fd5b506103247f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f057600080fd5b506101c56103ff366004611977565b610fb6565b34801561041057600080fd5b506101c5610fc0565b34801561042557600080fd5b5061047a610434366004611850565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b039384169594929360ff90921692911686565b604080516001600160a01b03978816815260208101969096528501939093529015156060840152608083015290911660a082015260c00161015c565b3480156104c257600080fd5b506101c56104d1366004611bcb565b610fcb565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461054d5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08115b9d1c9e541bda5b9d605a1b60448201526064015b60405180910390fd5b600080856001600160a01b0316858560405161056a929190611c57565b6000604051808303816000865af19150503d80600081146105a7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ac565b606091505b5091509150816105fe5760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20657865637574696f6e206661696c6564000000006044820152606401610544565b95945050505050565b834211156106415760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610544565b6040516bffffffffffffffffffffffff19606089811b8216602084015288901b16603482015260488101869052606881018590526000906088016040516020818303038152906040528051906020012090506000816040516020016106d291907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa15801561073d573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b03161461079e5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610544565b6107ac8a8a8a600080611193565b50505050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461082a5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08115b9d1c9e541bda5b9d605a1b6044820152606401610544565b60008061083a6060870187611c67565b8101906108479190611cb5565b915091508347101561089b5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742045544820666f722067617300000000000000006044820152606401610544565b50600095945050505050565b3360009081526003602052604090205460ff166109065760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206e6f7420617574686f72697a65642072656c617965720000006044820152606401610544565b61090f81611325565b50565b6000546001600160a01b031633146109585760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610544565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c43910160405180910390a25050565b3360009081526003602052604090205460ff16610a165760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206e6f7420617574686f72697a65642072656c617965720000006044820152606401610544565b6001600160a01b0382166000908152600260205260409020600381015460ff16610a525760405162461bcd60e51b815260040161054490611d12565b6002810154610a649062015180611d4c565b421015610a9f5760405162461bcd60e51b8152602060048201526009602482015268546f6f206561726c7960b81b6044820152606401610544565b60008160040154118015610abf575060058101546001600160a01b031615155b610afe5760405162461bcd60e51b815260206004820152601060248201526f4e6f20746f6b656e2062696e64696e6760801b6044820152606401610544565b600581015460048083015460405163b4b5b48f60e01b8152918201526000916001600160a01b03169063b4b5b48f90602401600060405180830381865afa158015610b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b759190810190611d5f565b90506000815111610bbd5760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420746f6b656e206461746160701b6044820152606401610544565b426002830155815460018301546040516323b872dd60e01b81526001600160a01b0387811660048301529283166024820152604481019190915284918216906323b872dd906064016020604051808303816000875af1158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190611dcd565b610c865760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610544565b846001600160a01b03167f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e8460010154604051610cc591815260200190565b60405180910390a25050505050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490526001600160a01b038881168552600280855294889020885196870189528054821687526001810154948701949094529383015496850196909652600382015460ff161515848201526004820154958401869052600590910154909116928201929092529115801590610d88575060a08201516001600160a01b031615155b15610e245760a0820151608083015160405163b4b5b48f60e01b81526001600160a01b039092169163b4b5b48f91610dc69160040190815260200190565b600060405180830381865afa925050508015610e0457506040513d6000823e601f3d908101601f19168201604052610e019190810190611d5f565b60015b610e1d5750604080516020810190915260008152915091565b9050915091565b50604080516020810190915260008152915091565b6001600160a01b038116610e885760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1bdad95b8818dbdb9d1c9858dd60521b6044820152606401610544565b6040516301ffc9a760e01b815263b4b5b48f60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190611dcd565b610f4e5760405162461bcd60e51b815260206004820152602260248201527f436f6e747261637420646f6573206e6f7420737570706f7274204549502d3737604482015261181960f11b6064820152608401610544565b610f5b3385858585611193565b50505050565b610f6f338383600080611193565b5050565b60005b82811015610f5b57610fae848483818110610f9357610f93611dea565b9050602002016020810190610fa89190611850565b836113a5565b600101610f76565b610f6f82826113a5565b610fc933611325565b565b834211156110055760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610544565b6001600160a01b0387811660008181526001602090815260408083205481517ff6d482ff1197373e2efd7a8f42553a41b6b1239cbeba07e510cde1f3c31a30af81850152808301959095528b86166060860152608085018b905260a085018a905260c0850189905294871660e0850152610100808501869052815180860390910181526101208501825280519083012061190160f01b6101408601527f00000000000000000000000000000000000000000000000000000000000000006101428601526101628086018290528251808703909101815261018290950190915283519390910192909220906110f98286611544565b90508a6001600160a01b0316816001600160a01b0316146111505760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610544565b6001600160a01b038b16600090815260016020526040812080549161117483611e00565b91905055506111868b8b8b8a8a611193565b5050505050505050505050565b6001600160a01b0384166111dc5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610544565b6000831161121d5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610544565b6040805160c0810182526001600160a01b03808716808352602080840188815242858701908152600160608701818152608088018b81528a881660a08a019081528f891660008181526002988990528c90209a518b54908b166001600160a01b0319918216178c559651948b01949094559351958901959095555160038801805491151560ff199092169190911790559251600487015551600590950180549590941694169390931790915591517fee07eb583d59d1dd654b3f82e1e812bdaca4d4eba2fc6c7c988ae385611dc237906113169087908790879092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a35050505050565b6001600160a01b0381166000908152600260205260409020600381015460ff166113615760405162461bcd60e51b815260040161054490611d12565b60038101805460ff191690556040516001600160a01b038316907f71215198e3f86c24dc3af6d0d7f84d0095e5ee736aa56daf9927fae51935e95d90600090a25050565b6001600160a01b0382166000908152600260205260409020600381015460ff166113e15760405162461bcd60e51b815260040161054490611d12565b60028101546113f39062015180611d4c565b42101561142e5760405162461bcd60e51b8152602060048201526009602482015268546f6f206561726c7960b81b6044820152606401610544565b426002820155805460018201546040516323b872dd60e01b81526001600160a01b0386811660048301529283166024820152604481019190915283918216906323b872dd906064016020604051808303816000875af1158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b99190611dcd565b6114f75760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610544565b836001600160a01b03167f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e836001015460405161153691815260200190565b60405180910390a250505050565b6000806000806115548686611570565b92509250925061156482826115bd565b50909150505b92915050565b600080600083516041036115aa5760208401516040850151606086015160001a61159c88828585611676565b9550955095505050506115b6565b50508151600091506002905b9250925092565b60008260038111156115d1576115d1611e19565b036115da575050565b60018260038111156115ee576115ee611e19565b0361160c5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561162057611620611e19565b036116415760405163fce698f760e01b815260048101829052602401610544565b600382600381111561165557611655611e19565b03610f6f576040516335e2f38360e21b815260048101829052602401610544565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156116b1575060009150600390508261173b565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611705573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117315750600092506001915082905061173b565b9250600091508190505b9450945094915050565b80356001600160a01b038116811461175c57600080fd5b919050565b60008060006040848603121561177657600080fd5b61177f84611745565b9250602084013567ffffffffffffffff81111561179b57600080fd5b8401601f810186136117ac57600080fd5b803567ffffffffffffffff8111156117c357600080fd5b8660208284010111156117d557600080fd5b939660209190910195509293505050565b60005b838110156118015781810151838201526020016117e9565b50506000910152565b600081518084526118228160208601602086016117e6565b601f01601f19169290920160200192915050565b602081526000611849602083018461180a565b9392505050565b60006020828403121561186257600080fd5b61184982611745565b600080600080600080600060e0888a03121561188657600080fd5b61188f88611745565b965061189d60208901611745565b95506040880135945060608801359350608088013560ff811681146118c157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806000606084860312156118f357600080fd5b833567ffffffffffffffff81111561190a57600080fd5b8401610160818703121561191d57600080fd5b95602085013595506040909401359392505050565b801515811461090f57600080fd5b6000806040838503121561195357600080fd5b61195c83611745565b9150602083013561196c81611932565b809150509250929050565b6000806040838503121561198a57600080fd5b61199383611745565b91506119a160208401611745565b90509250929050565b60018060a01b03835116815260208301516020820152604083015160408201526060830151151560608201526080830151608082015260018060a01b0360a08401511660a082015260e060c08201526000611a0860e083018461180a565b949350505050565b60008060008060808587031215611a2657600080fd5b611a2f85611745565b93506020850135925060408501359150611a4b60608601611745565b905092959194509250565b60008060408385031215611a6957600080fd5b611a7283611745565b946020939093013593505050565b600080600060408486031215611a9557600080fd5b833567ffffffffffffffff811115611aac57600080fd5b8401601f81018613611abd57600080fd5b803567ffffffffffffffff811115611ad457600080fd5b8660208260051b8401011115611ae957600080fd5b602091820194509250611afd908501611745565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4557611b45611b06565b604052919050565b600067ffffffffffffffff821115611b6757611b67611b06565b50601f01601f191660200190565b600082601f830112611b8657600080fd5b8135611b99611b9482611b4d565b611b1c565b818152846020838601011115611bae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215611be657600080fd5b611bef88611745565b9650611bfd60208901611745565b9550604088013594506060880135935060808801359250611c2060a08901611745565b915060c088013567ffffffffffffffff811115611c3c57600080fd5b611c488a828b01611b75565b91505092959891949750929550565b8183823760009101908152919050565b6000808335601e19843603018112611c7e57600080fd5b83018035915067ffffffffffffffff821115611c9957600080fd5b602001915036819003821315611cae57600080fd5b9250929050565b60008060408385031215611cc857600080fd5b82356001600160e01b031981168114611ce057600080fd5b9150602083013567ffffffffffffffff811115611cfc57600080fd5b611d0885828601611b75565b9150509250929050565b6020808252600a90820152694e6f742061637469766560b01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561156a5761156a611d36565b600060208284031215611d7157600080fd5b815167ffffffffffffffff811115611d8857600080fd5b8201601f81018413611d9957600080fd5b8051611da7611b9482611b4d565b818152856020838501011115611dbc57600080fd5b6105fe8260208301602086016117e6565b600060208284031215611ddf57600080fd5b815161184981611932565b634e487b7160e01b600052603260045260246000fd5b600060018201611e1257611e12611d36565b5060010190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212201858d9a8eacee76ef850078e9f4ac978ca5a666a2b68c215c0bbca3625c45ec364736f6c634300081a0033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80637ecebe00116100a0578063b0d691fe11610064578063b0d691fe146103b0578063d80aea15146103e4578063ea8a1af014610404578063f046395a14610419578063f41d0480146104b657600080fd5b80637ecebe00146102d75780638da5cb5b146103045780638de692841461033c578063902fe7da1461035c5780639a7f640d1461037c57600080fd5b80633c2ccec0116100e75780633c2ccec01461022957806346a9d08c1461024957806348f2dd6e1461026957806352e03bd614610289578063666b9a5d146102b757600080fd5b80631cff79cd1461012f57806329e295c5146101655780632a992dfd146101a55780633644e515146101c75780633a871cdd1461020957600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004611761565b6104d6565b60405161015c9190611836565b60405180910390f35b34801561017157600080fd5b50610195610180366004611850565b60036020526000908152604090205460ff1681565b604051901515815260200161015c565b3480156101b157600080fd5b506101c56101c036600461186b565b610607565b005b3480156101d357600080fd5b506101fb7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161015c565b34801561021557600080fd5b506101fb6102243660046118de565b6107b8565b34801561023557600080fd5b506101c5610244366004611850565b6108a7565b34801561025557600080fd5b506101c5610264366004611940565b610912565b34801561027557600080fd5b506101c5610284366004611977565b6109b7565b34801561029557600080fd5b506102a96102a4366004611850565b610cd4565b60405161015c9291906119aa565b3480156102c357600080fd5b506101c56102d2366004611a10565b610e39565b3480156102e357600080fd5b506101fb6102f2366004611850565b60016020526000908152604090205481565b34801561031057600080fd5b50600054610324906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b34801561034857600080fd5b506101c5610357366004611a56565b610f61565b34801561036857600080fd5b506101c5610377366004611a80565b610f73565b34801561038857600080fd5b506101fb7ff6d482ff1197373e2efd7a8f42553a41b6b1239cbeba07e510cde1f3c31a30af81565b3480156103bc57600080fd5b506103247f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f057600080fd5b506101c56103ff366004611977565b610fb6565b34801561041057600080fd5b506101c5610fc0565b34801561042557600080fd5b5061047a610434366004611850565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b039384169594929360ff90921692911686565b604080516001600160a01b03978816815260208101969096528501939093529015156060840152608083015290911660a082015260c00161015c565b3480156104c257600080fd5b506101c56104d1366004611bcb565b610fcb565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461054d5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08115b9d1c9e541bda5b9d605a1b60448201526064015b60405180910390fd5b600080856001600160a01b0316858560405161056a929190611c57565b6000604051808303816000865af19150503d80600081146105a7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ac565b606091505b5091509150816105fe5760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20657865637574696f6e206661696c6564000000006044820152606401610544565b95945050505050565b834211156106415760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610544565b6040516bffffffffffffffffffffffff19606089811b8216602084015288901b16603482015260488101869052606881018590526000906088016040516020818303038152906040528051906020012090506000816040516020016106d291907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa15801561073d573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b03161461079e5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610544565b6107ac8a8a8a600080611193565b50505050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461082a5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08115b9d1c9e541bda5b9d605a1b6044820152606401610544565b60008061083a6060870187611c67565b8101906108479190611cb5565b915091508347101561089b5760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742045544820666f722067617300000000000000006044820152606401610544565b50600095945050505050565b3360009081526003602052604090205460ff166109065760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206e6f7420617574686f72697a65642072656c617965720000006044820152606401610544565b61090f81611325565b50565b6000546001600160a01b031633146109585760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610544565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f4b36b2e66f38ed349bec532105790177f1283bcbc094e6cd48565195d3033c43910160405180910390a25050565b3360009081526003602052604090205460ff16610a165760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206e6f7420617574686f72697a65642072656c617965720000006044820152606401610544565b6001600160a01b0382166000908152600260205260409020600381015460ff16610a525760405162461bcd60e51b815260040161054490611d12565b6002810154610a649062015180611d4c565b421015610a9f5760405162461bcd60e51b8152602060048201526009602482015268546f6f206561726c7960b81b6044820152606401610544565b60008160040154118015610abf575060058101546001600160a01b031615155b610afe5760405162461bcd60e51b815260206004820152601060248201526f4e6f20746f6b656e2062696e64696e6760801b6044820152606401610544565b600581015460048083015460405163b4b5b48f60e01b8152918201526000916001600160a01b03169063b4b5b48f90602401600060405180830381865afa158015610b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b759190810190611d5f565b90506000815111610bbd5760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420746f6b656e206461746160701b6044820152606401610544565b426002830155815460018301546040516323b872dd60e01b81526001600160a01b0387811660048301529283166024820152604481019190915284918216906323b872dd906064016020604051808303816000875af1158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190611dcd565b610c865760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610544565b846001600160a01b03167f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e8460010154604051610cc591815260200190565b60405180910390a25050505050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490526001600160a01b038881168552600280855294889020885196870189528054821687526001810154948701949094529383015496850196909652600382015460ff161515848201526004820154958401869052600590910154909116928201929092529115801590610d88575060a08201516001600160a01b031615155b15610e245760a0820151608083015160405163b4b5b48f60e01b81526001600160a01b039092169163b4b5b48f91610dc69160040190815260200190565b600060405180830381865afa925050508015610e0457506040513d6000823e601f3d908101601f19168201604052610e019190810190611d5f565b60015b610e1d5750604080516020810190915260008152915091565b9050915091565b50604080516020810190915260008152915091565b6001600160a01b038116610e885760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1bdad95b8818dbdb9d1c9858dd60521b6044820152606401610544565b6040516301ffc9a760e01b815263b4b5b48f60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190611dcd565b610f4e5760405162461bcd60e51b815260206004820152602260248201527f436f6e747261637420646f6573206e6f7420737570706f7274204549502d3737604482015261181960f11b6064820152608401610544565b610f5b3385858585611193565b50505050565b610f6f338383600080611193565b5050565b60005b82811015610f5b57610fae848483818110610f9357610f93611dea565b9050602002016020810190610fa89190611850565b836113a5565b600101610f76565b610f6f82826113a5565b610fc933611325565b565b834211156110055760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610544565b6001600160a01b0387811660008181526001602090815260408083205481517ff6d482ff1197373e2efd7a8f42553a41b6b1239cbeba07e510cde1f3c31a30af81850152808301959095528b86166060860152608085018b905260a085018a905260c0850189905294871660e0850152610100808501869052815180860390910181526101208501825280519083012061190160f01b6101408601527f00000000000000000000000000000000000000000000000000000000000000006101428601526101628086018290528251808703909101815261018290950190915283519390910192909220906110f98286611544565b90508a6001600160a01b0316816001600160a01b0316146111505760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610544565b6001600160a01b038b16600090815260016020526040812080549161117483611e00565b91905055506111868b8b8b8a8a611193565b5050505050505050505050565b6001600160a01b0384166111dc5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610544565b6000831161121d5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610544565b6040805160c0810182526001600160a01b03808716808352602080840188815242858701908152600160608701818152608088018b81528a881660a08a019081528f891660008181526002988990528c90209a518b54908b166001600160a01b0319918216178c559651948b01949094559351958901959095555160038801805491151560ff199092169190911790559251600487015551600590950180549590941694169390931790915591517fee07eb583d59d1dd654b3f82e1e812bdaca4d4eba2fc6c7c988ae385611dc237906113169087908790879092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a35050505050565b6001600160a01b0381166000908152600260205260409020600381015460ff166113615760405162461bcd60e51b815260040161054490611d12565b60038101805460ff191690556040516001600160a01b038316907f71215198e3f86c24dc3af6d0d7f84d0095e5ee736aa56daf9927fae51935e95d90600090a25050565b6001600160a01b0382166000908152600260205260409020600381015460ff166113e15760405162461bcd60e51b815260040161054490611d12565b60028101546113f39062015180611d4c565b42101561142e5760405162461bcd60e51b8152602060048201526009602482015268546f6f206561726c7960b81b6044820152606401610544565b426002820155805460018201546040516323b872dd60e01b81526001600160a01b0386811660048301529283166024820152604481019190915283918216906323b872dd906064016020604051808303816000875af1158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b99190611dcd565b6114f75760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610544565b836001600160a01b03167f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e836001015460405161153691815260200190565b60405180910390a250505050565b6000806000806115548686611570565b92509250925061156482826115bd565b50909150505b92915050565b600080600083516041036115aa5760208401516040850151606086015160001a61159c88828585611676565b9550955095505050506115b6565b50508151600091506002905b9250925092565b60008260038111156115d1576115d1611e19565b036115da575050565b60018260038111156115ee576115ee611e19565b0361160c5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561162057611620611e19565b036116415760405163fce698f760e01b815260048101829052602401610544565b600382600381111561165557611655611e19565b03610f6f576040516335e2f38360e21b815260048101829052602401610544565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156116b1575060009150600390508261173b565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611705573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117315750600092506001915082905061173b565b9250600091508190505b9450945094915050565b80356001600160a01b038116811461175c57600080fd5b919050565b60008060006040848603121561177657600080fd5b61177f84611745565b9250602084013567ffffffffffffffff81111561179b57600080fd5b8401601f810186136117ac57600080fd5b803567ffffffffffffffff8111156117c357600080fd5b8660208284010111156117d557600080fd5b939660209190910195509293505050565b60005b838110156118015781810151838201526020016117e9565b50506000910152565b600081518084526118228160208601602086016117e6565b601f01601f19169290920160200192915050565b602081526000611849602083018461180a565b9392505050565b60006020828403121561186257600080fd5b61184982611745565b600080600080600080600060e0888a03121561188657600080fd5b61188f88611745565b965061189d60208901611745565b95506040880135945060608801359350608088013560ff811681146118c157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806000606084860312156118f357600080fd5b833567ffffffffffffffff81111561190a57600080fd5b8401610160818703121561191d57600080fd5b95602085013595506040909401359392505050565b801515811461090f57600080fd5b6000806040838503121561195357600080fd5b61195c83611745565b9150602083013561196c81611932565b809150509250929050565b6000806040838503121561198a57600080fd5b61199383611745565b91506119a160208401611745565b90509250929050565b60018060a01b03835116815260208301516020820152604083015160408201526060830151151560608201526080830151608082015260018060a01b0360a08401511660a082015260e060c08201526000611a0860e083018461180a565b949350505050565b60008060008060808587031215611a2657600080fd5b611a2f85611745565b93506020850135925060408501359150611a4b60608601611745565b905092959194509250565b60008060408385031215611a6957600080fd5b611a7283611745565b946020939093013593505050565b600080600060408486031215611a9557600080fd5b833567ffffffffffffffff811115611aac57600080fd5b8401601f81018613611abd57600080fd5b803567ffffffffffffffff811115611ad457600080fd5b8660208260051b8401011115611ae957600080fd5b602091820194509250611afd908501611745565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4557611b45611b06565b604052919050565b600067ffffffffffffffff821115611b6757611b67611b06565b50601f01601f191660200190565b600082601f830112611b8657600080fd5b8135611b99611b9482611b4d565b611b1c565b818152846020838601011115611bae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215611be657600080fd5b611bef88611745565b9650611bfd60208901611745565b9550604088013594506060880135935060808801359250611c2060a08901611745565b915060c088013567ffffffffffffffff811115611c3c57600080fd5b611c488a828b01611b75565b91505092959891949750929550565b8183823760009101908152919050565b6000808335601e19843603018112611c7e57600080fd5b83018035915067ffffffffffffffff821115611c9957600080fd5b602001915036819003821315611cae57600080fd5b9250929050565b60008060408385031215611cc857600080fd5b82356001600160e01b031981168114611ce057600080fd5b9150602083013567ffffffffffffffff811115611cfc57600080fd5b611d0885828601611b75565b9150509250929050565b6020808252600a90820152694e6f742061637469766560b01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561156a5761156a611d36565b600060208284031215611d7157600080fd5b815167ffffffffffffffff811115611d8857600080fd5b8201601f81018413611d9957600080fd5b8051611da7611b9482611b4d565b818152856020838501011115611dbc57600080fd5b6105fe8260208301602086016117e6565b600060208284031215611ddf57600080fd5b815161184981611932565b634e487b7160e01b600052603260045260246000fd5b600060018201611e1257611e12611d36565b5060010190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212201858d9a8eacee76ef850078e9f4ac978ca5a666a2b68c215c0bbca3625c45ec364736f6c634300081a0033",
  "devdoc": {
    "details": "A subscription manager for daily savings transfers with ERC-4337 and EIP-7702 support",
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancel()": {
        "details": "Cancel subscription"
      },
      "cancelFor(address)": {
        "details": "Cancel subscription for another user (only callable by authorized relayers)",
        "params": {
          "user": "Address of the user to cancel subscription for"
        }
      },
      "constructor": {
        "details": "Constructor sets the EntryPoint and domain separator",
        "params": {
          "_entryPoint": "Address of the ERC-4337 EntryPoint contract"
        }
      },
      "execute(address,address)": {
        "details": "Execute a subscription transfer",
        "params": {
          "tokenAddress": "Token contract address for the transfer",
          "user": "User whose subscription to execute"
        }
      },
      "execute(address,bytes)": {
        "details": "Function to execute arbitrary contract calls (for ERC-4337 compatibility)",
        "params": {
          "data": "Call data",
          "target": "Address to call"
        },
        "returns": {
          "result": "Return data from the call"
        }
      },
      "executeBatch(address[],address)": {
        "details": "Execute multiple subscription transfers (gas efficient)",
        "params": {
          "tokenAddress": "Token contract address for the transfers",
          "users": "Array of users whose subscriptions to execute"
        }
      },
      "executeWithTokenData(address,address)": {
        "details": "Execute subscription using EIP-7702 token data",
        "params": {
          "tokenAddress": "Token contract address for the transfer",
          "user": "User whose subscription to execute"
        }
      },
      "getSubscriptionWithPayload(address)": {
        "details": "Function to get subscription details with payload from EIP-7702 token",
        "params": {
          "user": "User address"
        },
        "returns": {
          "subscription": "Subscription details",
          "tokenPayload": "Token payload if available"
        }
      },
      "setRelayerAuthorization(address,bool)": {
        "details": "Set authorization for a relayer",
        "params": {
          "authorized": "Whether to authorize or deauthorize",
          "relayer": "Address of the relayer"
        }
      },
      "subscribe(address,uint256)": {
        "details": "Subscribe to daily savings",
        "params": {
          "amountPerDay": "Amount to transfer daily",
          "receiver": "Address to receive the daily transfers"
        }
      },
      "subscribeWithEIP712(address,address,uint256,uint256,uint256,address,bytes)": {
        "details": "Subscribe with EIP-712 signature and token binding",
        "params": {
          "amountPerDay": "Amount to transfer daily",
          "deadline": "Expiration timestamp for this signature",
          "receiver": "Address to receive the daily transfers",
          "signature": "EIP-712 signature",
          "tokenContract": "Address of the EIP-7702 compliant contract",
          "tokenId": "ID of the EIP-7702 token to bind subscription data to",
          "user": "User address that will provide the funds"
        }
      },
      "subscribeWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Subscribe with signature (meta-transaction)",
        "params": {
          "amountPerDay": "Amount to transfer daily",
          "deadline": "Expiration timestamp for this signature",
          "r": "ECDSA signature parameter r",
          "receiver": "Address to receive the daily transfers",
          "s": "ECDSA signature parameter s",
          "user": "User address that will provide the funds",
          "v": "ECDSA signature parameter v"
        }
      },
      "subscribeWithToken(address,uint256,uint256,address)": {
        "details": "Subscribe to daily savings with EIP-7702 token binding",
        "params": {
          "amountPerDay": "Amount to transfer daily",
          "receiver": "Address to receive the daily transfers",
          "tokenContract": "Address of the EIP-7702 compliant contract",
          "tokenId": "ID of the EIP-7702 token to bind subscription data to"
        }
      },
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "details": "Validate a UserOperation for ERC-4337",
        "params": {
          "requiredPrefund": "Amount of ETH required for prefunding",
          "userOp": "User operation to validate"
        },
        "returns": {
          "validationData": "Result of validation"
        }
      }
    },
    "title": "DailySavingsManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7102,
        "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7106,
        "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7111,
        "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
        "label": "subscriptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Subscription)7100_storage)"
      },
      {
        "astId": 7115,
        "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
        "label": "authorizedRelayers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Subscription)7100_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DailySavingsManager.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)7100_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Subscription)7100_storage": {
        "encoding": "inplace",
        "label": "struct DailySavingsManager.Subscription",
        "members": [
          {
            "astId": 7089,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7091,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "amountPerDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7093,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "lastExecuted",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7095,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7097,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7099,
            "contract": "contracts/DailySavingsManager.sol:DailySavingsManager",
            "label": "tokenContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}